// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"ppgroup.m0chi.com/ent/listing"
	"ppgroup.m0chi.com/ent/predicate"
	"ppgroup.m0chi.com/ent/realtor"
	"ppgroup.m0chi.com/ent/schema"
)

// ListingUpdate is the builder for updating Listing entities.
type ListingUpdate struct {
	config
	hooks    []Hook
	mutation *ListingMutation
}

// Where appends a list predicates to the ListingUpdate builder.
func (lu *ListingUpdate) Where(ps ...predicate.Listing) *ListingUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdateTime sets the "update_time" field.
func (lu *ListingUpdate) SetUpdateTime(t time.Time) *ListingUpdate {
	lu.mutation.SetUpdateTime(t)
	return lu
}

// SetTitle sets the "title" field.
func (lu *ListingUpdate) SetTitle(s string) *ListingUpdate {
	lu.mutation.SetTitle(s)
	return lu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableTitle(s *string) *ListingUpdate {
	if s != nil {
		lu.SetTitle(*s)
	}
	return lu
}

// SetAddress sets the "address" field.
func (lu *ListingUpdate) SetAddress(s string) *ListingUpdate {
	lu.mutation.SetAddress(s)
	return lu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableAddress(s *string) *ListingUpdate {
	if s != nil {
		lu.SetAddress(*s)
	}
	return lu
}

// SetCity sets the "city" field.
func (lu *ListingUpdate) SetCity(s string) *ListingUpdate {
	lu.mutation.SetCity(s)
	return lu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableCity(s *string) *ListingUpdate {
	if s != nil {
		lu.SetCity(*s)
	}
	return lu
}

// SetState sets the "state" field.
func (lu *ListingUpdate) SetState(s string) *ListingUpdate {
	lu.mutation.SetState(s)
	return lu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableState(s *string) *ListingUpdate {
	if s != nil {
		lu.SetState(*s)
	}
	return lu
}

// SetZipCode sets the "zip_code" field.
func (lu *ListingUpdate) SetZipCode(s string) *ListingUpdate {
	lu.mutation.SetZipCode(s)
	return lu
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableZipCode(s *string) *ListingUpdate {
	if s != nil {
		lu.SetZipCode(*s)
	}
	return lu
}

// SetDescription sets the "description" field.
func (lu *ListingUpdate) SetDescription(s string) *ListingUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableDescription(s *string) *ListingUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// ClearDescription clears the value of the "description" field.
func (lu *ListingUpdate) ClearDescription() *ListingUpdate {
	lu.mutation.ClearDescription()
	return lu
}

// SetPrice sets the "price" field.
func (lu *ListingUpdate) SetPrice(d decimal.Decimal) *ListingUpdate {
	lu.mutation.ResetPrice()
	lu.mutation.SetPrice(d)
	return lu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (lu *ListingUpdate) SetNillablePrice(d *decimal.Decimal) *ListingUpdate {
	if d != nil {
		lu.SetPrice(*d)
	}
	return lu
}

// AddPrice adds d to the "price" field.
func (lu *ListingUpdate) AddPrice(d decimal.Decimal) *ListingUpdate {
	lu.mutation.AddPrice(d)
	return lu
}

// SetBedroom sets the "bedroom" field.
func (lu *ListingUpdate) SetBedroom(i int) *ListingUpdate {
	lu.mutation.ResetBedroom()
	lu.mutation.SetBedroom(i)
	return lu
}

// SetNillableBedroom sets the "bedroom" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableBedroom(i *int) *ListingUpdate {
	if i != nil {
		lu.SetBedroom(*i)
	}
	return lu
}

// AddBedroom adds i to the "bedroom" field.
func (lu *ListingUpdate) AddBedroom(i int) *ListingUpdate {
	lu.mutation.AddBedroom(i)
	return lu
}

// SetBathroom sets the "bathroom" field.
func (lu *ListingUpdate) SetBathroom(f float64) *ListingUpdate {
	lu.mutation.ResetBathroom()
	lu.mutation.SetBathroom(f)
	return lu
}

// SetNillableBathroom sets the "bathroom" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableBathroom(f *float64) *ListingUpdate {
	if f != nil {
		lu.SetBathroom(*f)
	}
	return lu
}

// AddBathroom adds f to the "bathroom" field.
func (lu *ListingUpdate) AddBathroom(f float64) *ListingUpdate {
	lu.mutation.AddBathroom(f)
	return lu
}

// SetGarage sets the "garage" field.
func (lu *ListingUpdate) SetGarage(i int) *ListingUpdate {
	lu.mutation.ResetGarage()
	lu.mutation.SetGarage(i)
	return lu
}

// SetNillableGarage sets the "garage" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableGarage(i *int) *ListingUpdate {
	if i != nil {
		lu.SetGarage(*i)
	}
	return lu
}

// AddGarage adds i to the "garage" field.
func (lu *ListingUpdate) AddGarage(i int) *ListingUpdate {
	lu.mutation.AddGarage(i)
	return lu
}

// ClearGarage clears the value of the "garage" field.
func (lu *ListingUpdate) ClearGarage() *ListingUpdate {
	lu.mutation.ClearGarage()
	return lu
}

// SetSqft sets the "sqft" field.
func (lu *ListingUpdate) SetSqft(i int) *ListingUpdate {
	lu.mutation.ResetSqft()
	lu.mutation.SetSqft(i)
	return lu
}

// SetNillableSqft sets the "sqft" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableSqft(i *int) *ListingUpdate {
	if i != nil {
		lu.SetSqft(*i)
	}
	return lu
}

// AddSqft adds i to the "sqft" field.
func (lu *ListingUpdate) AddSqft(i int) *ListingUpdate {
	lu.mutation.AddSqft(i)
	return lu
}

// SetTypeOfProperty sets the "type_of_property" field.
func (lu *ListingUpdate) SetTypeOfProperty(lop listing.TypeOfProperty) *ListingUpdate {
	lu.mutation.SetTypeOfProperty(lop)
	return lu
}

// SetNillableTypeOfProperty sets the "type_of_property" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableTypeOfProperty(lop *listing.TypeOfProperty) *ListingUpdate {
	if lop != nil {
		lu.SetTypeOfProperty(*lop)
	}
	return lu
}

// SetStatus sets the "status" field.
func (lu *ListingUpdate) SetStatus(l listing.Status) *ListingUpdate {
	lu.mutation.SetStatus(l)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableStatus(l *listing.Status) *ListingUpdate {
	if l != nil {
		lu.SetStatus(*l)
	}
	return lu
}

// SetLotSize sets the "lot_size" field.
func (lu *ListingUpdate) SetLotSize(i int) *ListingUpdate {
	lu.mutation.ResetLotSize()
	lu.mutation.SetLotSize(i)
	return lu
}

// SetNillableLotSize sets the "lot_size" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableLotSize(i *int) *ListingUpdate {
	if i != nil {
		lu.SetLotSize(*i)
	}
	return lu
}

// AddLotSize adds i to the "lot_size" field.
func (lu *ListingUpdate) AddLotSize(i int) *ListingUpdate {
	lu.mutation.AddLotSize(i)
	return lu
}

// ClearLotSize clears the value of the "lot_size" field.
func (lu *ListingUpdate) ClearLotSize() *ListingUpdate {
	lu.mutation.ClearLotSize()
	return lu
}

// SetPool sets the "pool" field.
func (lu *ListingUpdate) SetPool(b bool) *ListingUpdate {
	lu.mutation.SetPool(b)
	return lu
}

// SetNillablePool sets the "pool" field if the given value is not nil.
func (lu *ListingUpdate) SetNillablePool(b *bool) *ListingUpdate {
	if b != nil {
		lu.SetPool(*b)
	}
	return lu
}

// ClearPool clears the value of the "pool" field.
func (lu *ListingUpdate) ClearPool() *ListingUpdate {
	lu.mutation.ClearPool()
	return lu
}

// SetYearBuilt sets the "year_built" field.
func (lu *ListingUpdate) SetYearBuilt(i int) *ListingUpdate {
	lu.mutation.ResetYearBuilt()
	lu.mutation.SetYearBuilt(i)
	return lu
}

// SetNillableYearBuilt sets the "year_built" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableYearBuilt(i *int) *ListingUpdate {
	if i != nil {
		lu.SetYearBuilt(*i)
	}
	return lu
}

// AddYearBuilt adds i to the "year_built" field.
func (lu *ListingUpdate) AddYearBuilt(i int) *ListingUpdate {
	lu.mutation.AddYearBuilt(i)
	return lu
}

// SetMedia sets the "media" field.
func (lu *ListingUpdate) SetMedia(s []schema.Media) *ListingUpdate {
	lu.mutation.SetMedia(s)
	return lu
}

// AppendMedia appends s to the "media" field.
func (lu *ListingUpdate) AppendMedia(s []schema.Media) *ListingUpdate {
	lu.mutation.AppendMedia(s)
	return lu
}

// ClearMedia clears the value of the "media" field.
func (lu *ListingUpdate) ClearMedia() *ListingUpdate {
	lu.mutation.ClearMedia()
	return lu
}

// SetRealtorID sets the "realtor_id" field.
func (lu *ListingUpdate) SetRealtorID(u uuid.UUID) *ListingUpdate {
	lu.mutation.SetRealtorID(u)
	return lu
}

// SetNillableRealtorID sets the "realtor_id" field if the given value is not nil.
func (lu *ListingUpdate) SetNillableRealtorID(u *uuid.UUID) *ListingUpdate {
	if u != nil {
		lu.SetRealtorID(*u)
	}
	return lu
}

// SetRealtor sets the "realtor" edge to the Realtor entity.
func (lu *ListingUpdate) SetRealtor(r *Realtor) *ListingUpdate {
	return lu.SetRealtorID(r.ID)
}

// Mutation returns the ListingMutation object of the builder.
func (lu *ListingUpdate) Mutation() *ListingMutation {
	return lu.mutation
}

// ClearRealtor clears the "realtor" edge to the Realtor entity.
func (lu *ListingUpdate) ClearRealtor() *ListingUpdate {
	lu.mutation.ClearRealtor()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *ListingUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *ListingUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *ListingUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *ListingUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *ListingUpdate) defaults() {
	if _, ok := lu.mutation.UpdateTime(); !ok {
		v := listing.UpdateDefaultUpdateTime()
		lu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *ListingUpdate) check() error {
	if v, ok := lu.mutation.Title(); ok {
		if err := listing.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Listing.title": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Address(); ok {
		if err := listing.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Listing.address": %w`, err)}
		}
	}
	if v, ok := lu.mutation.City(); ok {
		if err := listing.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Listing.city": %w`, err)}
		}
	}
	if v, ok := lu.mutation.State(); ok {
		if err := listing.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Listing.state": %w`, err)}
		}
	}
	if v, ok := lu.mutation.ZipCode(); ok {
		if err := listing.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Listing.zip_code": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Bedroom(); ok {
		if err := listing.BedroomValidator(v); err != nil {
			return &ValidationError{Name: "bedroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bedroom": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Bathroom(); ok {
		if err := listing.BathroomValidator(v); err != nil {
			return &ValidationError{Name: "bathroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bathroom": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Garage(); ok {
		if err := listing.GarageValidator(v); err != nil {
			return &ValidationError{Name: "garage", err: fmt.Errorf(`ent: validator failed for field "Listing.garage": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Sqft(); ok {
		if err := listing.SqftValidator(v); err != nil {
			return &ValidationError{Name: "sqft", err: fmt.Errorf(`ent: validator failed for field "Listing.sqft": %w`, err)}
		}
	}
	if v, ok := lu.mutation.TypeOfProperty(); ok {
		if err := listing.TypeOfPropertyValidator(v); err != nil {
			return &ValidationError{Name: "type_of_property", err: fmt.Errorf(`ent: validator failed for field "Listing.type_of_property": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Status(); ok {
		if err := listing.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Listing.status": %w`, err)}
		}
	}
	if v, ok := lu.mutation.LotSize(); ok {
		if err := listing.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "lot_size", err: fmt.Errorf(`ent: validator failed for field "Listing.lot_size": %w`, err)}
		}
	}
	if v, ok := lu.mutation.YearBuilt(); ok {
		if err := listing.YearBuiltValidator(v); err != nil {
			return &ValidationError{Name: "year_built", err: fmt.Errorf(`ent: validator failed for field "Listing.year_built": %w`, err)}
		}
	}
	if lu.mutation.RealtorCleared() && len(lu.mutation.RealtorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Listing.realtor"`)
	}
	return nil
}

func (lu *ListingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(listing.Table, listing.Columns, sqlgraph.NewFieldSpec(listing.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdateTime(); ok {
		_spec.SetField(listing.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Title(); ok {
		_spec.SetField(listing.FieldTitle, field.TypeString, value)
	}
	if value, ok := lu.mutation.Address(); ok {
		_spec.SetField(listing.FieldAddress, field.TypeString, value)
	}
	if value, ok := lu.mutation.City(); ok {
		_spec.SetField(listing.FieldCity, field.TypeString, value)
	}
	if value, ok := lu.mutation.State(); ok {
		_spec.SetField(listing.FieldState, field.TypeString, value)
	}
	if value, ok := lu.mutation.ZipCode(); ok {
		_spec.SetField(listing.FieldZipCode, field.TypeString, value)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(listing.FieldDescription, field.TypeString, value)
	}
	if lu.mutation.DescriptionCleared() {
		_spec.ClearField(listing.FieldDescription, field.TypeString)
	}
	if value, ok := lu.mutation.Price(); ok {
		_spec.SetField(listing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedPrice(); ok {
		_spec.AddField(listing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.Bedroom(); ok {
		_spec.SetField(listing.FieldBedroom, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedBedroom(); ok {
		_spec.AddField(listing.FieldBedroom, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Bathroom(); ok {
		_spec.SetField(listing.FieldBathroom, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedBathroom(); ok {
		_spec.AddField(listing.FieldBathroom, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.Garage(); ok {
		_spec.SetField(listing.FieldGarage, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedGarage(); ok {
		_spec.AddField(listing.FieldGarage, field.TypeInt, value)
	}
	if lu.mutation.GarageCleared() {
		_spec.ClearField(listing.FieldGarage, field.TypeInt)
	}
	if value, ok := lu.mutation.Sqft(); ok {
		_spec.SetField(listing.FieldSqft, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedSqft(); ok {
		_spec.AddField(listing.FieldSqft, field.TypeInt, value)
	}
	if value, ok := lu.mutation.TypeOfProperty(); ok {
		_spec.SetField(listing.FieldTypeOfProperty, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(listing.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.LotSize(); ok {
		_spec.SetField(listing.FieldLotSize, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedLotSize(); ok {
		_spec.AddField(listing.FieldLotSize, field.TypeInt, value)
	}
	if lu.mutation.LotSizeCleared() {
		_spec.ClearField(listing.FieldLotSize, field.TypeInt)
	}
	if value, ok := lu.mutation.Pool(); ok {
		_spec.SetField(listing.FieldPool, field.TypeBool, value)
	}
	if lu.mutation.PoolCleared() {
		_spec.ClearField(listing.FieldPool, field.TypeBool)
	}
	if value, ok := lu.mutation.YearBuilt(); ok {
		_spec.SetField(listing.FieldYearBuilt, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedYearBuilt(); ok {
		_spec.AddField(listing.FieldYearBuilt, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Media(); ok {
		_spec.SetField(listing.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.AppendedMedia(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldMedia, value)
		})
	}
	if lu.mutation.MediaCleared() {
		_spec.ClearField(listing.FieldMedia, field.TypeJSON)
	}
	if lu.mutation.RealtorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.RealtorTable,
			Columns: []string{listing.RealtorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RealtorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.RealtorTable,
			Columns: []string{listing.RealtorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// ListingUpdateOne is the builder for updating a single Listing entity.
type ListingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ListingMutation
}

// SetUpdateTime sets the "update_time" field.
func (luo *ListingUpdateOne) SetUpdateTime(t time.Time) *ListingUpdateOne {
	luo.mutation.SetUpdateTime(t)
	return luo
}

// SetTitle sets the "title" field.
func (luo *ListingUpdateOne) SetTitle(s string) *ListingUpdateOne {
	luo.mutation.SetTitle(s)
	return luo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableTitle(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetTitle(*s)
	}
	return luo
}

// SetAddress sets the "address" field.
func (luo *ListingUpdateOne) SetAddress(s string) *ListingUpdateOne {
	luo.mutation.SetAddress(s)
	return luo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableAddress(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetAddress(*s)
	}
	return luo
}

// SetCity sets the "city" field.
func (luo *ListingUpdateOne) SetCity(s string) *ListingUpdateOne {
	luo.mutation.SetCity(s)
	return luo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableCity(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetCity(*s)
	}
	return luo
}

// SetState sets the "state" field.
func (luo *ListingUpdateOne) SetState(s string) *ListingUpdateOne {
	luo.mutation.SetState(s)
	return luo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableState(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetState(*s)
	}
	return luo
}

// SetZipCode sets the "zip_code" field.
func (luo *ListingUpdateOne) SetZipCode(s string) *ListingUpdateOne {
	luo.mutation.SetZipCode(s)
	return luo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableZipCode(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetZipCode(*s)
	}
	return luo
}

// SetDescription sets the "description" field.
func (luo *ListingUpdateOne) SetDescription(s string) *ListingUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableDescription(s *string) *ListingUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// ClearDescription clears the value of the "description" field.
func (luo *ListingUpdateOne) ClearDescription() *ListingUpdateOne {
	luo.mutation.ClearDescription()
	return luo
}

// SetPrice sets the "price" field.
func (luo *ListingUpdateOne) SetPrice(d decimal.Decimal) *ListingUpdateOne {
	luo.mutation.ResetPrice()
	luo.mutation.SetPrice(d)
	return luo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillablePrice(d *decimal.Decimal) *ListingUpdateOne {
	if d != nil {
		luo.SetPrice(*d)
	}
	return luo
}

// AddPrice adds d to the "price" field.
func (luo *ListingUpdateOne) AddPrice(d decimal.Decimal) *ListingUpdateOne {
	luo.mutation.AddPrice(d)
	return luo
}

// SetBedroom sets the "bedroom" field.
func (luo *ListingUpdateOne) SetBedroom(i int) *ListingUpdateOne {
	luo.mutation.ResetBedroom()
	luo.mutation.SetBedroom(i)
	return luo
}

// SetNillableBedroom sets the "bedroom" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableBedroom(i *int) *ListingUpdateOne {
	if i != nil {
		luo.SetBedroom(*i)
	}
	return luo
}

// AddBedroom adds i to the "bedroom" field.
func (luo *ListingUpdateOne) AddBedroom(i int) *ListingUpdateOne {
	luo.mutation.AddBedroom(i)
	return luo
}

// SetBathroom sets the "bathroom" field.
func (luo *ListingUpdateOne) SetBathroom(f float64) *ListingUpdateOne {
	luo.mutation.ResetBathroom()
	luo.mutation.SetBathroom(f)
	return luo
}

// SetNillableBathroom sets the "bathroom" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableBathroom(f *float64) *ListingUpdateOne {
	if f != nil {
		luo.SetBathroom(*f)
	}
	return luo
}

// AddBathroom adds f to the "bathroom" field.
func (luo *ListingUpdateOne) AddBathroom(f float64) *ListingUpdateOne {
	luo.mutation.AddBathroom(f)
	return luo
}

// SetGarage sets the "garage" field.
func (luo *ListingUpdateOne) SetGarage(i int) *ListingUpdateOne {
	luo.mutation.ResetGarage()
	luo.mutation.SetGarage(i)
	return luo
}

// SetNillableGarage sets the "garage" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableGarage(i *int) *ListingUpdateOne {
	if i != nil {
		luo.SetGarage(*i)
	}
	return luo
}

// AddGarage adds i to the "garage" field.
func (luo *ListingUpdateOne) AddGarage(i int) *ListingUpdateOne {
	luo.mutation.AddGarage(i)
	return luo
}

// ClearGarage clears the value of the "garage" field.
func (luo *ListingUpdateOne) ClearGarage() *ListingUpdateOne {
	luo.mutation.ClearGarage()
	return luo
}

// SetSqft sets the "sqft" field.
func (luo *ListingUpdateOne) SetSqft(i int) *ListingUpdateOne {
	luo.mutation.ResetSqft()
	luo.mutation.SetSqft(i)
	return luo
}

// SetNillableSqft sets the "sqft" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableSqft(i *int) *ListingUpdateOne {
	if i != nil {
		luo.SetSqft(*i)
	}
	return luo
}

// AddSqft adds i to the "sqft" field.
func (luo *ListingUpdateOne) AddSqft(i int) *ListingUpdateOne {
	luo.mutation.AddSqft(i)
	return luo
}

// SetTypeOfProperty sets the "type_of_property" field.
func (luo *ListingUpdateOne) SetTypeOfProperty(lop listing.TypeOfProperty) *ListingUpdateOne {
	luo.mutation.SetTypeOfProperty(lop)
	return luo
}

// SetNillableTypeOfProperty sets the "type_of_property" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableTypeOfProperty(lop *listing.TypeOfProperty) *ListingUpdateOne {
	if lop != nil {
		luo.SetTypeOfProperty(*lop)
	}
	return luo
}

// SetStatus sets the "status" field.
func (luo *ListingUpdateOne) SetStatus(l listing.Status) *ListingUpdateOne {
	luo.mutation.SetStatus(l)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableStatus(l *listing.Status) *ListingUpdateOne {
	if l != nil {
		luo.SetStatus(*l)
	}
	return luo
}

// SetLotSize sets the "lot_size" field.
func (luo *ListingUpdateOne) SetLotSize(i int) *ListingUpdateOne {
	luo.mutation.ResetLotSize()
	luo.mutation.SetLotSize(i)
	return luo
}

// SetNillableLotSize sets the "lot_size" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableLotSize(i *int) *ListingUpdateOne {
	if i != nil {
		luo.SetLotSize(*i)
	}
	return luo
}

// AddLotSize adds i to the "lot_size" field.
func (luo *ListingUpdateOne) AddLotSize(i int) *ListingUpdateOne {
	luo.mutation.AddLotSize(i)
	return luo
}

// ClearLotSize clears the value of the "lot_size" field.
func (luo *ListingUpdateOne) ClearLotSize() *ListingUpdateOne {
	luo.mutation.ClearLotSize()
	return luo
}

// SetPool sets the "pool" field.
func (luo *ListingUpdateOne) SetPool(b bool) *ListingUpdateOne {
	luo.mutation.SetPool(b)
	return luo
}

// SetNillablePool sets the "pool" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillablePool(b *bool) *ListingUpdateOne {
	if b != nil {
		luo.SetPool(*b)
	}
	return luo
}

// ClearPool clears the value of the "pool" field.
func (luo *ListingUpdateOne) ClearPool() *ListingUpdateOne {
	luo.mutation.ClearPool()
	return luo
}

// SetYearBuilt sets the "year_built" field.
func (luo *ListingUpdateOne) SetYearBuilt(i int) *ListingUpdateOne {
	luo.mutation.ResetYearBuilt()
	luo.mutation.SetYearBuilt(i)
	return luo
}

// SetNillableYearBuilt sets the "year_built" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableYearBuilt(i *int) *ListingUpdateOne {
	if i != nil {
		luo.SetYearBuilt(*i)
	}
	return luo
}

// AddYearBuilt adds i to the "year_built" field.
func (luo *ListingUpdateOne) AddYearBuilt(i int) *ListingUpdateOne {
	luo.mutation.AddYearBuilt(i)
	return luo
}

// SetMedia sets the "media" field.
func (luo *ListingUpdateOne) SetMedia(s []schema.Media) *ListingUpdateOne {
	luo.mutation.SetMedia(s)
	return luo
}

// AppendMedia appends s to the "media" field.
func (luo *ListingUpdateOne) AppendMedia(s []schema.Media) *ListingUpdateOne {
	luo.mutation.AppendMedia(s)
	return luo
}

// ClearMedia clears the value of the "media" field.
func (luo *ListingUpdateOne) ClearMedia() *ListingUpdateOne {
	luo.mutation.ClearMedia()
	return luo
}

// SetRealtorID sets the "realtor_id" field.
func (luo *ListingUpdateOne) SetRealtorID(u uuid.UUID) *ListingUpdateOne {
	luo.mutation.SetRealtorID(u)
	return luo
}

// SetNillableRealtorID sets the "realtor_id" field if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableRealtorID(u *uuid.UUID) *ListingUpdateOne {
	if u != nil {
		luo.SetRealtorID(*u)
	}
	return luo
}

// SetRealtor sets the "realtor" edge to the Realtor entity.
func (luo *ListingUpdateOne) SetRealtor(r *Realtor) *ListingUpdateOne {
	return luo.SetRealtorID(r.ID)
}

// Mutation returns the ListingMutation object of the builder.
func (luo *ListingUpdateOne) Mutation() *ListingMutation {
	return luo.mutation
}

// ClearRealtor clears the "realtor" edge to the Realtor entity.
func (luo *ListingUpdateOne) ClearRealtor() *ListingUpdateOne {
	luo.mutation.ClearRealtor()
	return luo
}

// Where appends a list predicates to the ListingUpdate builder.
func (luo *ListingUpdateOne) Where(ps ...predicate.Listing) *ListingUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *ListingUpdateOne) Select(field string, fields ...string) *ListingUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Listing entity.
func (luo *ListingUpdateOne) Save(ctx context.Context) (*Listing, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *ListingUpdateOne) SaveX(ctx context.Context) *Listing {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *ListingUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *ListingUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *ListingUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdateTime(); !ok {
		v := listing.UpdateDefaultUpdateTime()
		luo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *ListingUpdateOne) check() error {
	if v, ok := luo.mutation.Title(); ok {
		if err := listing.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Listing.title": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Address(); ok {
		if err := listing.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Listing.address": %w`, err)}
		}
	}
	if v, ok := luo.mutation.City(); ok {
		if err := listing.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Listing.city": %w`, err)}
		}
	}
	if v, ok := luo.mutation.State(); ok {
		if err := listing.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Listing.state": %w`, err)}
		}
	}
	if v, ok := luo.mutation.ZipCode(); ok {
		if err := listing.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Listing.zip_code": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Bedroom(); ok {
		if err := listing.BedroomValidator(v); err != nil {
			return &ValidationError{Name: "bedroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bedroom": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Bathroom(); ok {
		if err := listing.BathroomValidator(v); err != nil {
			return &ValidationError{Name: "bathroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bathroom": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Garage(); ok {
		if err := listing.GarageValidator(v); err != nil {
			return &ValidationError{Name: "garage", err: fmt.Errorf(`ent: validator failed for field "Listing.garage": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Sqft(); ok {
		if err := listing.SqftValidator(v); err != nil {
			return &ValidationError{Name: "sqft", err: fmt.Errorf(`ent: validator failed for field "Listing.sqft": %w`, err)}
		}
	}
	if v, ok := luo.mutation.TypeOfProperty(); ok {
		if err := listing.TypeOfPropertyValidator(v); err != nil {
			return &ValidationError{Name: "type_of_property", err: fmt.Errorf(`ent: validator failed for field "Listing.type_of_property": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Status(); ok {
		if err := listing.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Listing.status": %w`, err)}
		}
	}
	if v, ok := luo.mutation.LotSize(); ok {
		if err := listing.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "lot_size", err: fmt.Errorf(`ent: validator failed for field "Listing.lot_size": %w`, err)}
		}
	}
	if v, ok := luo.mutation.YearBuilt(); ok {
		if err := listing.YearBuiltValidator(v); err != nil {
			return &ValidationError{Name: "year_built", err: fmt.Errorf(`ent: validator failed for field "Listing.year_built": %w`, err)}
		}
	}
	if luo.mutation.RealtorCleared() && len(luo.mutation.RealtorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Listing.realtor"`)
	}
	return nil
}

func (luo *ListingUpdateOne) sqlSave(ctx context.Context) (_node *Listing, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(listing.Table, listing.Columns, sqlgraph.NewFieldSpec(listing.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Listing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, listing.FieldID)
		for _, f := range fields {
			if !listing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != listing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdateTime(); ok {
		_spec.SetField(listing.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Title(); ok {
		_spec.SetField(listing.FieldTitle, field.TypeString, value)
	}
	if value, ok := luo.mutation.Address(); ok {
		_spec.SetField(listing.FieldAddress, field.TypeString, value)
	}
	if value, ok := luo.mutation.City(); ok {
		_spec.SetField(listing.FieldCity, field.TypeString, value)
	}
	if value, ok := luo.mutation.State(); ok {
		_spec.SetField(listing.FieldState, field.TypeString, value)
	}
	if value, ok := luo.mutation.ZipCode(); ok {
		_spec.SetField(listing.FieldZipCode, field.TypeString, value)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(listing.FieldDescription, field.TypeString, value)
	}
	if luo.mutation.DescriptionCleared() {
		_spec.ClearField(listing.FieldDescription, field.TypeString)
	}
	if value, ok := luo.mutation.Price(); ok {
		_spec.SetField(listing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedPrice(); ok {
		_spec.AddField(listing.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.Bedroom(); ok {
		_spec.SetField(listing.FieldBedroom, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedBedroom(); ok {
		_spec.AddField(listing.FieldBedroom, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Bathroom(); ok {
		_spec.SetField(listing.FieldBathroom, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedBathroom(); ok {
		_spec.AddField(listing.FieldBathroom, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.Garage(); ok {
		_spec.SetField(listing.FieldGarage, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedGarage(); ok {
		_spec.AddField(listing.FieldGarage, field.TypeInt, value)
	}
	if luo.mutation.GarageCleared() {
		_spec.ClearField(listing.FieldGarage, field.TypeInt)
	}
	if value, ok := luo.mutation.Sqft(); ok {
		_spec.SetField(listing.FieldSqft, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedSqft(); ok {
		_spec.AddField(listing.FieldSqft, field.TypeInt, value)
	}
	if value, ok := luo.mutation.TypeOfProperty(); ok {
		_spec.SetField(listing.FieldTypeOfProperty, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(listing.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.LotSize(); ok {
		_spec.SetField(listing.FieldLotSize, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedLotSize(); ok {
		_spec.AddField(listing.FieldLotSize, field.TypeInt, value)
	}
	if luo.mutation.LotSizeCleared() {
		_spec.ClearField(listing.FieldLotSize, field.TypeInt)
	}
	if value, ok := luo.mutation.Pool(); ok {
		_spec.SetField(listing.FieldPool, field.TypeBool, value)
	}
	if luo.mutation.PoolCleared() {
		_spec.ClearField(listing.FieldPool, field.TypeBool)
	}
	if value, ok := luo.mutation.YearBuilt(); ok {
		_spec.SetField(listing.FieldYearBuilt, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedYearBuilt(); ok {
		_spec.AddField(listing.FieldYearBuilt, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Media(); ok {
		_spec.SetField(listing.FieldMedia, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.AppendedMedia(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldMedia, value)
		})
	}
	if luo.mutation.MediaCleared() {
		_spec.ClearField(listing.FieldMedia, field.TypeJSON)
	}
	if luo.mutation.RealtorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.RealtorTable,
			Columns: []string{listing.RealtorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RealtorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.RealtorTable,
			Columns: []string{listing.RealtorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Listing{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
