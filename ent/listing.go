// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"ppgroup.ppgroup.com/ent/listing"
	"ppgroup.ppgroup.com/ent/realtor"
	"ppgroup.ppgroup.com/ent/schema"
)

// Listing is the model entity for the Listing schema.
type Listing struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// ZipCode holds the value of the "zip_code" field.
	ZipCode string `json:"zip_code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price decimal.Decimal `json:"price,omitempty"`
	// Bedroom holds the value of the "bedroom" field.
	Bedroom int `json:"bedroom,omitempty"`
	// Bathroom holds the value of the "bathroom" field.
	Bathroom float64 `json:"bathroom,omitempty"`
	// Garage holds the value of the "garage" field.
	Garage int `json:"garage,omitempty"`
	// Sqft holds the value of the "sqft" field.
	Sqft int `json:"sqft,omitempty"`
	// TypeOfProperty holds the value of the "type_of_property" field.
	TypeOfProperty listing.TypeOfProperty `json:"type_of_property,omitempty"`
	// Status holds the value of the "status" field.
	Status listing.Status `json:"status,omitempty"`
	// LotSize holds the value of the "lot_size" field.
	LotSize int `json:"lot_size,omitempty"`
	// Pool holds the value of the "pool" field.
	Pool bool `json:"pool,omitempty"`
	// YearBuilt holds the value of the "year_built" field.
	YearBuilt int `json:"year_built,omitempty"`
	// Media holds the value of the "media" field.
	Media []schema.Media `json:"media,omitempty"`
	// RealtorID holds the value of the "realtor_id" field.
	RealtorID uuid.UUID `json:"realtor_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListingQuery when eager-loading is set.
	Edges        ListingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ListingEdges holds the relations/edges for other nodes in the graph.
type ListingEdges struct {
	// Realtor holds the value of the realtor edge.
	Realtor *Realtor `json:"realtor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RealtorOrErr returns the Realtor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ListingEdges) RealtorOrErr() (*Realtor, error) {
	if e.Realtor != nil {
		return e.Realtor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: realtor.Label}
	}
	return nil, &NotLoadedError{edge: "realtor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Listing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case listing.FieldMedia:
			values[i] = new([]byte)
		case listing.FieldPrice:
			values[i] = new(decimal.Decimal)
		case listing.FieldPool:
			values[i] = new(sql.NullBool)
		case listing.FieldBathroom:
			values[i] = new(sql.NullFloat64)
		case listing.FieldBedroom, listing.FieldGarage, listing.FieldSqft, listing.FieldLotSize, listing.FieldYearBuilt:
			values[i] = new(sql.NullInt64)
		case listing.FieldTitle, listing.FieldAddress, listing.FieldCity, listing.FieldState, listing.FieldZipCode, listing.FieldDescription, listing.FieldTypeOfProperty, listing.FieldStatus:
			values[i] = new(sql.NullString)
		case listing.FieldCreateTime, listing.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case listing.FieldID, listing.FieldRealtorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Listing fields.
func (l *Listing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case listing.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case listing.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				l.CreateTime = value.Time
			}
		case listing.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				l.UpdateTime = value.Time
			}
		case listing.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				l.Title = value.String
			}
		case listing.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				l.Address = value.String
			}
		case listing.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				l.City = value.String
			}
		case listing.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				l.State = value.String
			}
		case listing.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				l.ZipCode = value.String
			}
		case listing.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				l.Description = value.String
			}
		case listing.FieldPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil {
				l.Price = *value
			}
		case listing.FieldBedroom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bedroom", values[i])
			} else if value.Valid {
				l.Bedroom = int(value.Int64)
			}
		case listing.FieldBathroom:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bathroom", values[i])
			} else if value.Valid {
				l.Bathroom = value.Float64
			}
		case listing.FieldGarage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field garage", values[i])
			} else if value.Valid {
				l.Garage = int(value.Int64)
			}
		case listing.FieldSqft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sqft", values[i])
			} else if value.Valid {
				l.Sqft = int(value.Int64)
			}
		case listing.FieldTypeOfProperty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_of_property", values[i])
			} else if value.Valid {
				l.TypeOfProperty = listing.TypeOfProperty(value.String)
			}
		case listing.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				l.Status = listing.Status(value.String)
			}
		case listing.FieldLotSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lot_size", values[i])
			} else if value.Valid {
				l.LotSize = int(value.Int64)
			}
		case listing.FieldPool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pool", values[i])
			} else if value.Valid {
				l.Pool = value.Bool
			}
		case listing.FieldYearBuilt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year_built", values[i])
			} else if value.Valid {
				l.YearBuilt = int(value.Int64)
			}
		case listing.FieldMedia:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.Media); err != nil {
					return fmt.Errorf("unmarshal field media: %w", err)
				}
			}
		case listing.FieldRealtorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field realtor_id", values[i])
			} else if value != nil {
				l.RealtorID = *value
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Listing.
// This includes values selected through modifiers, order, etc.
func (l *Listing) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryRealtor queries the "realtor" edge of the Listing entity.
func (l *Listing) QueryRealtor() *RealtorQuery {
	return NewListingClient(l.config).QueryRealtor(l)
}

// Update returns a builder for updating this Listing.
// Note that you need to call Listing.Unwrap() before calling this method if this Listing
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Listing) Update() *ListingUpdateOne {
	return NewListingClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Listing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Listing) Unwrap() *Listing {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Listing is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Listing) String() string {
	var builder strings.Builder
	builder.WriteString("Listing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("create_time=")
	builder.WriteString(l.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(l.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(l.Title)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(l.Address)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(l.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(l.State)
	builder.WriteString(", ")
	builder.WriteString("zip_code=")
	builder.WriteString(l.ZipCode)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(l.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", l.Price))
	builder.WriteString(", ")
	builder.WriteString("bedroom=")
	builder.WriteString(fmt.Sprintf("%v", l.Bedroom))
	builder.WriteString(", ")
	builder.WriteString("bathroom=")
	builder.WriteString(fmt.Sprintf("%v", l.Bathroom))
	builder.WriteString(", ")
	builder.WriteString("garage=")
	builder.WriteString(fmt.Sprintf("%v", l.Garage))
	builder.WriteString(", ")
	builder.WriteString("sqft=")
	builder.WriteString(fmt.Sprintf("%v", l.Sqft))
	builder.WriteString(", ")
	builder.WriteString("type_of_property=")
	builder.WriteString(fmt.Sprintf("%v", l.TypeOfProperty))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteString(", ")
	builder.WriteString("lot_size=")
	builder.WriteString(fmt.Sprintf("%v", l.LotSize))
	builder.WriteString(", ")
	builder.WriteString("pool=")
	builder.WriteString(fmt.Sprintf("%v", l.Pool))
	builder.WriteString(", ")
	builder.WriteString("year_built=")
	builder.WriteString(fmt.Sprintf("%v", l.YearBuilt))
	builder.WriteString(", ")
	builder.WriteString("media=")
	builder.WriteString(fmt.Sprintf("%v", l.Media))
	builder.WriteString(", ")
	builder.WriteString("realtor_id=")
	builder.WriteString(fmt.Sprintf("%v", l.RealtorID))
	builder.WriteByte(')')
	return builder.String()
}

// Listings is a parsable slice of Listing.
type Listings []*Listing
