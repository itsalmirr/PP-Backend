// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"ppgroup.ppgroup.com/ent/realtor"
)

// Realtor is the model entity for the Realtor schema.
type Realtor struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name" validate:"required,min=5,max=100"`
	// Photo holds the value of the "photo" field.
	Photo map[string]interface{} `json:"photo,omitempty" validate:"omitempty, json"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" validate:"max=500"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone"`
	// Email holds the value of the "email" field.
	Email string `json:"email" validate:"required,email"`
	// IsMvp holds the value of the "is_mvp" field.
	IsMvp bool `json:"is_mvp"`
	// HireDate holds the value of the "hire_date" field.
	HireDate time.Time `json:"hire_date"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RealtorQuery when eager-loading is set.
	Edges        RealtorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RealtorEdges holds the relations/edges for other nodes in the graph.
type RealtorEdges struct {
	// Listings holds the value of the listings edge.
	Listings []*Listing `json:"listings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ListingsOrErr returns the Listings value or an error if the edge
// was not loaded in eager-loading.
func (e RealtorEdges) ListingsOrErr() ([]*Listing, error) {
	if e.loadedTypes[0] {
		return e.Listings, nil
	}
	return nil, &NotLoadedError{edge: "listings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Realtor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case realtor.FieldPhoto:
			values[i] = new([]byte)
		case realtor.FieldIsMvp:
			values[i] = new(sql.NullBool)
		case realtor.FieldFullName, realtor.FieldDescription, realtor.FieldPhone, realtor.FieldEmail:
			values[i] = new(sql.NullString)
		case realtor.FieldCreateTime, realtor.FieldUpdateTime, realtor.FieldHireDate:
			values[i] = new(sql.NullTime)
		case realtor.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Realtor fields.
func (r *Realtor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case realtor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case realtor.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case realtor.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case realtor.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				r.FullName = value.String
			}
		case realtor.FieldPhoto:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photo", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Photo); err != nil {
					return fmt.Errorf("unmarshal field photo: %w", err)
				}
			}
		case realtor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case realtor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				r.Phone = value.String
			}
		case realtor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				r.Email = value.String
			}
		case realtor.FieldIsMvp:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_mvp", values[i])
			} else if value.Valid {
				r.IsMvp = value.Bool
			}
		case realtor.FieldHireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field hire_date", values[i])
			} else if value.Valid {
				r.HireDate = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Realtor.
// This includes values selected through modifiers, order, etc.
func (r *Realtor) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryListings queries the "listings" edge of the Realtor entity.
func (r *Realtor) QueryListings() *ListingQuery {
	return NewRealtorClient(r.config).QueryListings(r)
}

// Update returns a builder for updating this Realtor.
// Note that you need to call Realtor.Unwrap() before calling this method if this Realtor
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Realtor) Update() *RealtorUpdateOne {
	return NewRealtorClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Realtor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Realtor) Unwrap() *Realtor {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Realtor is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Realtor) String() string {
	var builder strings.Builder
	builder.WriteString("Realtor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(r.FullName)
	builder.WriteString(", ")
	builder.WriteString("photo=")
	builder.WriteString(fmt.Sprintf("%v", r.Photo))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(r.Email)
	builder.WriteString(", ")
	builder.WriteString("is_mvp=")
	builder.WriteString(fmt.Sprintf("%v", r.IsMvp))
	builder.WriteString(", ")
	builder.WriteString("hire_date=")
	builder.WriteString(r.HireDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Realtors is a parsable slice of Realtor.
type Realtors []*Realtor
