// Code generated by ent, DO NOT EDIT.

package listing

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"ppgroup.ppgroup.com/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldTitle, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldState, v))
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldZipCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldDescription, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldPrice, v))
}

// Bedroom applies equality check predicate on the "bedroom" field. It's identical to BedroomEQ.
func Bedroom(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldBedroom, v))
}

// Bathroom applies equality check predicate on the "bathroom" field. It's identical to BathroomEQ.
func Bathroom(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldBathroom, v))
}

// Garage applies equality check predicate on the "garage" field. It's identical to GarageEQ.
func Garage(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldGarage, v))
}

// Sqft applies equality check predicate on the "sqft" field. It's identical to SqftEQ.
func Sqft(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldSqft, v))
}

// LotSize applies equality check predicate on the "lot_size" field. It's identical to LotSizeEQ.
func LotSize(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldLotSize, v))
}

// Pool applies equality check predicate on the "pool" field. It's identical to PoolEQ.
func Pool(v bool) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldPool, v))
}

// YearBuilt applies equality check predicate on the "year_built" field. It's identical to YearBuiltEQ.
func YearBuilt(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldYearBuilt, v))
}

// RealtorID applies equality check predicate on the "realtor_id" field. It's identical to RealtorIDEQ.
func RealtorID(v uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldRealtorID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldTitle, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldState, v))
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldZipCode, v))
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldZipCode, v))
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldZipCode, v))
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldZipCode, v))
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldZipCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Listing {
	return predicate.Listing(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Listing {
	return predicate.Listing(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Listing {
	return predicate.Listing(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Listing {
	return predicate.Listing(sql.FieldContainsFold(FieldDescription, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v decimal.Decimal) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldPrice, v))
}

// BedroomEQ applies the EQ predicate on the "bedroom" field.
func BedroomEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldBedroom, v))
}

// BedroomNEQ applies the NEQ predicate on the "bedroom" field.
func BedroomNEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldBedroom, v))
}

// BedroomIn applies the In predicate on the "bedroom" field.
func BedroomIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldBedroom, vs...))
}

// BedroomNotIn applies the NotIn predicate on the "bedroom" field.
func BedroomNotIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldBedroom, vs...))
}

// BedroomGT applies the GT predicate on the "bedroom" field.
func BedroomGT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldBedroom, v))
}

// BedroomGTE applies the GTE predicate on the "bedroom" field.
func BedroomGTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldBedroom, v))
}

// BedroomLT applies the LT predicate on the "bedroom" field.
func BedroomLT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldBedroom, v))
}

// BedroomLTE applies the LTE predicate on the "bedroom" field.
func BedroomLTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldBedroom, v))
}

// BathroomEQ applies the EQ predicate on the "bathroom" field.
func BathroomEQ(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldBathroom, v))
}

// BathroomNEQ applies the NEQ predicate on the "bathroom" field.
func BathroomNEQ(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldBathroom, v))
}

// BathroomIn applies the In predicate on the "bathroom" field.
func BathroomIn(vs ...float64) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldBathroom, vs...))
}

// BathroomNotIn applies the NotIn predicate on the "bathroom" field.
func BathroomNotIn(vs ...float64) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldBathroom, vs...))
}

// BathroomGT applies the GT predicate on the "bathroom" field.
func BathroomGT(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldBathroom, v))
}

// BathroomGTE applies the GTE predicate on the "bathroom" field.
func BathroomGTE(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldBathroom, v))
}

// BathroomLT applies the LT predicate on the "bathroom" field.
func BathroomLT(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldBathroom, v))
}

// BathroomLTE applies the LTE predicate on the "bathroom" field.
func BathroomLTE(v float64) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldBathroom, v))
}

// GarageEQ applies the EQ predicate on the "garage" field.
func GarageEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldGarage, v))
}

// GarageNEQ applies the NEQ predicate on the "garage" field.
func GarageNEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldGarage, v))
}

// GarageIn applies the In predicate on the "garage" field.
func GarageIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldGarage, vs...))
}

// GarageNotIn applies the NotIn predicate on the "garage" field.
func GarageNotIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldGarage, vs...))
}

// GarageGT applies the GT predicate on the "garage" field.
func GarageGT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldGarage, v))
}

// GarageGTE applies the GTE predicate on the "garage" field.
func GarageGTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldGarage, v))
}

// GarageLT applies the LT predicate on the "garage" field.
func GarageLT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldGarage, v))
}

// GarageLTE applies the LTE predicate on the "garage" field.
func GarageLTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldGarage, v))
}

// GarageIsNil applies the IsNil predicate on the "garage" field.
func GarageIsNil() predicate.Listing {
	return predicate.Listing(sql.FieldIsNull(FieldGarage))
}

// GarageNotNil applies the NotNil predicate on the "garage" field.
func GarageNotNil() predicate.Listing {
	return predicate.Listing(sql.FieldNotNull(FieldGarage))
}

// SqftEQ applies the EQ predicate on the "sqft" field.
func SqftEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldSqft, v))
}

// SqftNEQ applies the NEQ predicate on the "sqft" field.
func SqftNEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldSqft, v))
}

// SqftIn applies the In predicate on the "sqft" field.
func SqftIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldSqft, vs...))
}

// SqftNotIn applies the NotIn predicate on the "sqft" field.
func SqftNotIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldSqft, vs...))
}

// SqftGT applies the GT predicate on the "sqft" field.
func SqftGT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldSqft, v))
}

// SqftGTE applies the GTE predicate on the "sqft" field.
func SqftGTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldSqft, v))
}

// SqftLT applies the LT predicate on the "sqft" field.
func SqftLT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldSqft, v))
}

// SqftLTE applies the LTE predicate on the "sqft" field.
func SqftLTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldSqft, v))
}

// TypeOfPropertyEQ applies the EQ predicate on the "type_of_property" field.
func TypeOfPropertyEQ(v TypeOfProperty) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldTypeOfProperty, v))
}

// TypeOfPropertyNEQ applies the NEQ predicate on the "type_of_property" field.
func TypeOfPropertyNEQ(v TypeOfProperty) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldTypeOfProperty, v))
}

// TypeOfPropertyIn applies the In predicate on the "type_of_property" field.
func TypeOfPropertyIn(vs ...TypeOfProperty) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldTypeOfProperty, vs...))
}

// TypeOfPropertyNotIn applies the NotIn predicate on the "type_of_property" field.
func TypeOfPropertyNotIn(vs ...TypeOfProperty) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldTypeOfProperty, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldStatus, vs...))
}

// LotSizeEQ applies the EQ predicate on the "lot_size" field.
func LotSizeEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldLotSize, v))
}

// LotSizeNEQ applies the NEQ predicate on the "lot_size" field.
func LotSizeNEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldLotSize, v))
}

// LotSizeIn applies the In predicate on the "lot_size" field.
func LotSizeIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldLotSize, vs...))
}

// LotSizeNotIn applies the NotIn predicate on the "lot_size" field.
func LotSizeNotIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldLotSize, vs...))
}

// LotSizeGT applies the GT predicate on the "lot_size" field.
func LotSizeGT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldLotSize, v))
}

// LotSizeGTE applies the GTE predicate on the "lot_size" field.
func LotSizeGTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldLotSize, v))
}

// LotSizeLT applies the LT predicate on the "lot_size" field.
func LotSizeLT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldLotSize, v))
}

// LotSizeLTE applies the LTE predicate on the "lot_size" field.
func LotSizeLTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldLotSize, v))
}

// LotSizeIsNil applies the IsNil predicate on the "lot_size" field.
func LotSizeIsNil() predicate.Listing {
	return predicate.Listing(sql.FieldIsNull(FieldLotSize))
}

// LotSizeNotNil applies the NotNil predicate on the "lot_size" field.
func LotSizeNotNil() predicate.Listing {
	return predicate.Listing(sql.FieldNotNull(FieldLotSize))
}

// PoolEQ applies the EQ predicate on the "pool" field.
func PoolEQ(v bool) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldPool, v))
}

// PoolNEQ applies the NEQ predicate on the "pool" field.
func PoolNEQ(v bool) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldPool, v))
}

// PoolIsNil applies the IsNil predicate on the "pool" field.
func PoolIsNil() predicate.Listing {
	return predicate.Listing(sql.FieldIsNull(FieldPool))
}

// PoolNotNil applies the NotNil predicate on the "pool" field.
func PoolNotNil() predicate.Listing {
	return predicate.Listing(sql.FieldNotNull(FieldPool))
}

// YearBuiltEQ applies the EQ predicate on the "year_built" field.
func YearBuiltEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldYearBuilt, v))
}

// YearBuiltNEQ applies the NEQ predicate on the "year_built" field.
func YearBuiltNEQ(v int) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldYearBuilt, v))
}

// YearBuiltIn applies the In predicate on the "year_built" field.
func YearBuiltIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldYearBuilt, vs...))
}

// YearBuiltNotIn applies the NotIn predicate on the "year_built" field.
func YearBuiltNotIn(vs ...int) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldYearBuilt, vs...))
}

// YearBuiltGT applies the GT predicate on the "year_built" field.
func YearBuiltGT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGT(FieldYearBuilt, v))
}

// YearBuiltGTE applies the GTE predicate on the "year_built" field.
func YearBuiltGTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldGTE(FieldYearBuilt, v))
}

// YearBuiltLT applies the LT predicate on the "year_built" field.
func YearBuiltLT(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLT(FieldYearBuilt, v))
}

// YearBuiltLTE applies the LTE predicate on the "year_built" field.
func YearBuiltLTE(v int) predicate.Listing {
	return predicate.Listing(sql.FieldLTE(FieldYearBuilt, v))
}

// MediaIsNil applies the IsNil predicate on the "media" field.
func MediaIsNil() predicate.Listing {
	return predicate.Listing(sql.FieldIsNull(FieldMedia))
}

// MediaNotNil applies the NotNil predicate on the "media" field.
func MediaNotNil() predicate.Listing {
	return predicate.Listing(sql.FieldNotNull(FieldMedia))
}

// RealtorIDEQ applies the EQ predicate on the "realtor_id" field.
func RealtorIDEQ(v uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldEQ(FieldRealtorID, v))
}

// RealtorIDNEQ applies the NEQ predicate on the "realtor_id" field.
func RealtorIDNEQ(v uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldNEQ(FieldRealtorID, v))
}

// RealtorIDIn applies the In predicate on the "realtor_id" field.
func RealtorIDIn(vs ...uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldIn(FieldRealtorID, vs...))
}

// RealtorIDNotIn applies the NotIn predicate on the "realtor_id" field.
func RealtorIDNotIn(vs ...uuid.UUID) predicate.Listing {
	return predicate.Listing(sql.FieldNotIn(FieldRealtorID, vs...))
}

// HasRealtor applies the HasEdge predicate on the "realtor" edge.
func HasRealtor() predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RealtorTable, RealtorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealtorWith applies the HasEdge predicate on the "realtor" edge with a given conditions (other predicates).
func HasRealtorWith(preds ...predicate.Realtor) predicate.Listing {
	return predicate.Listing(func(s *sql.Selector) {
		step := newRealtorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Listing) predicate.Listing {
	return predicate.Listing(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Listing) predicate.Listing {
	return predicate.Listing(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Listing) predicate.Listing {
	return predicate.Listing(sql.NotPredicates(p))
}
