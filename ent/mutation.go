// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"ppgroup.ppgroup.com/ent/listing"
	"ppgroup.ppgroup.com/ent/predicate"
	"ppgroup.ppgroup.com/ent/realtor"
	"ppgroup.ppgroup.com/ent/schema"
	"ppgroup.ppgroup.com/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeListing = "Listing"
	TypeRealtor = "Realtor"
	TypeUser    = "User"
)

// ListingMutation represents an operation that mutates the Listing nodes in the graph.
type ListingMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	create_time      *time.Time
	update_time      *time.Time
	title            *string
	address          *string
	city             *string
	state            *string
	zip_code         *string
	description      *string
	price            *decimal.Decimal
	addprice         *decimal.Decimal
	bedroom          *int
	addbedroom       *int
	bathroom         *float64
	addbathroom      *float64
	garage           *int
	addgarage        *int
	sqft             *int
	addsqft          *int
	type_of_property *listing.TypeOfProperty
	status           *listing.Status
	lot_size         *int
	addlot_size      *int
	pool             *bool
	year_built       *int
	addyear_built    *int
	media            *[]schema.Media
	appendmedia      []schema.Media
	clearedFields    map[string]struct{}
	realtor          *uuid.UUID
	clearedrealtor   bool
	done             bool
	oldValue         func(context.Context) (*Listing, error)
	predicates       []predicate.Listing
}

var _ ent.Mutation = (*ListingMutation)(nil)

// listingOption allows management of the mutation configuration using functional options.
type listingOption func(*ListingMutation)

// newListingMutation creates new mutation for the Listing entity.
func newListingMutation(c config, op Op, opts ...listingOption) *ListingMutation {
	m := &ListingMutation{
		config:        c,
		op:            op,
		typ:           TypeListing,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withListingID sets the ID field of the mutation.
func withListingID(id uuid.UUID) listingOption {
	return func(m *ListingMutation) {
		var (
			err   error
			once  sync.Once
			value *Listing
		)
		m.oldValue = func(ctx context.Context) (*Listing, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Listing.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withListing sets the old Listing of the mutation.
func withListing(node *Listing) listingOption {
	return func(m *ListingMutation) {
		m.oldValue = func(context.Context) (*Listing, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ListingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ListingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Listing entities.
func (m *ListingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ListingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ListingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Listing.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ListingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ListingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ListingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ListingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ListingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ListingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *ListingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ListingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ListingMutation) ResetTitle() {
	m.title = nil
}

// SetAddress sets the "address" field.
func (m *ListingMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ListingMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ListingMutation) ResetAddress() {
	m.address = nil
}

// SetCity sets the "city" field.
func (m *ListingMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *ListingMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *ListingMutation) ResetCity() {
	m.city = nil
}

// SetState sets the "state" field.
func (m *ListingMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *ListingMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *ListingMutation) ResetState() {
	m.state = nil
}

// SetZipCode sets the "zip_code" field.
func (m *ListingMutation) SetZipCode(s string) {
	m.zip_code = &s
}

// ZipCode returns the value of the "zip_code" field in the mutation.
func (m *ListingMutation) ZipCode() (r string, exists bool) {
	v := m.zip_code
	if v == nil {
		return
	}
	return *v, true
}

// OldZipCode returns the old "zip_code" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldZipCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZipCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZipCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZipCode: %w", err)
	}
	return oldValue.ZipCode, nil
}

// ResetZipCode resets all changes to the "zip_code" field.
func (m *ListingMutation) ResetZipCode() {
	m.zip_code = nil
}

// SetDescription sets the "description" field.
func (m *ListingMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ListingMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ListingMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[listing.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ListingMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[listing.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ListingMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, listing.FieldDescription)
}

// SetPrice sets the "price" field.
func (m *ListingMutation) SetPrice(d decimal.Decimal) {
	m.price = &d
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ListingMutation) Price() (r decimal.Decimal, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldPrice(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds d to the "price" field.
func (m *ListingMutation) AddPrice(d decimal.Decimal) {
	if m.addprice != nil {
		*m.addprice = m.addprice.Add(d)
	} else {
		m.addprice = &d
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ListingMutation) AddedPrice() (r decimal.Decimal, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ListingMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetBedroom sets the "bedroom" field.
func (m *ListingMutation) SetBedroom(i int) {
	m.bedroom = &i
	m.addbedroom = nil
}

// Bedroom returns the value of the "bedroom" field in the mutation.
func (m *ListingMutation) Bedroom() (r int, exists bool) {
	v := m.bedroom
	if v == nil {
		return
	}
	return *v, true
}

// OldBedroom returns the old "bedroom" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldBedroom(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBedroom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBedroom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBedroom: %w", err)
	}
	return oldValue.Bedroom, nil
}

// AddBedroom adds i to the "bedroom" field.
func (m *ListingMutation) AddBedroom(i int) {
	if m.addbedroom != nil {
		*m.addbedroom += i
	} else {
		m.addbedroom = &i
	}
}

// AddedBedroom returns the value that was added to the "bedroom" field in this mutation.
func (m *ListingMutation) AddedBedroom() (r int, exists bool) {
	v := m.addbedroom
	if v == nil {
		return
	}
	return *v, true
}

// ResetBedroom resets all changes to the "bedroom" field.
func (m *ListingMutation) ResetBedroom() {
	m.bedroom = nil
	m.addbedroom = nil
}

// SetBathroom sets the "bathroom" field.
func (m *ListingMutation) SetBathroom(f float64) {
	m.bathroom = &f
	m.addbathroom = nil
}

// Bathroom returns the value of the "bathroom" field in the mutation.
func (m *ListingMutation) Bathroom() (r float64, exists bool) {
	v := m.bathroom
	if v == nil {
		return
	}
	return *v, true
}

// OldBathroom returns the old "bathroom" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldBathroom(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBathroom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBathroom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBathroom: %w", err)
	}
	return oldValue.Bathroom, nil
}

// AddBathroom adds f to the "bathroom" field.
func (m *ListingMutation) AddBathroom(f float64) {
	if m.addbathroom != nil {
		*m.addbathroom += f
	} else {
		m.addbathroom = &f
	}
}

// AddedBathroom returns the value that was added to the "bathroom" field in this mutation.
func (m *ListingMutation) AddedBathroom() (r float64, exists bool) {
	v := m.addbathroom
	if v == nil {
		return
	}
	return *v, true
}

// ResetBathroom resets all changes to the "bathroom" field.
func (m *ListingMutation) ResetBathroom() {
	m.bathroom = nil
	m.addbathroom = nil
}

// SetGarage sets the "garage" field.
func (m *ListingMutation) SetGarage(i int) {
	m.garage = &i
	m.addgarage = nil
}

// Garage returns the value of the "garage" field in the mutation.
func (m *ListingMutation) Garage() (r int, exists bool) {
	v := m.garage
	if v == nil {
		return
	}
	return *v, true
}

// OldGarage returns the old "garage" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldGarage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGarage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGarage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGarage: %w", err)
	}
	return oldValue.Garage, nil
}

// AddGarage adds i to the "garage" field.
func (m *ListingMutation) AddGarage(i int) {
	if m.addgarage != nil {
		*m.addgarage += i
	} else {
		m.addgarage = &i
	}
}

// AddedGarage returns the value that was added to the "garage" field in this mutation.
func (m *ListingMutation) AddedGarage() (r int, exists bool) {
	v := m.addgarage
	if v == nil {
		return
	}
	return *v, true
}

// ClearGarage clears the value of the "garage" field.
func (m *ListingMutation) ClearGarage() {
	m.garage = nil
	m.addgarage = nil
	m.clearedFields[listing.FieldGarage] = struct{}{}
}

// GarageCleared returns if the "garage" field was cleared in this mutation.
func (m *ListingMutation) GarageCleared() bool {
	_, ok := m.clearedFields[listing.FieldGarage]
	return ok
}

// ResetGarage resets all changes to the "garage" field.
func (m *ListingMutation) ResetGarage() {
	m.garage = nil
	m.addgarage = nil
	delete(m.clearedFields, listing.FieldGarage)
}

// SetSqft sets the "sqft" field.
func (m *ListingMutation) SetSqft(i int) {
	m.sqft = &i
	m.addsqft = nil
}

// Sqft returns the value of the "sqft" field in the mutation.
func (m *ListingMutation) Sqft() (r int, exists bool) {
	v := m.sqft
	if v == nil {
		return
	}
	return *v, true
}

// OldSqft returns the old "sqft" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldSqft(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSqft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSqft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSqft: %w", err)
	}
	return oldValue.Sqft, nil
}

// AddSqft adds i to the "sqft" field.
func (m *ListingMutation) AddSqft(i int) {
	if m.addsqft != nil {
		*m.addsqft += i
	} else {
		m.addsqft = &i
	}
}

// AddedSqft returns the value that was added to the "sqft" field in this mutation.
func (m *ListingMutation) AddedSqft() (r int, exists bool) {
	v := m.addsqft
	if v == nil {
		return
	}
	return *v, true
}

// ResetSqft resets all changes to the "sqft" field.
func (m *ListingMutation) ResetSqft() {
	m.sqft = nil
	m.addsqft = nil
}

// SetTypeOfProperty sets the "type_of_property" field.
func (m *ListingMutation) SetTypeOfProperty(lop listing.TypeOfProperty) {
	m.type_of_property = &lop
}

// TypeOfProperty returns the value of the "type_of_property" field in the mutation.
func (m *ListingMutation) TypeOfProperty() (r listing.TypeOfProperty, exists bool) {
	v := m.type_of_property
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeOfProperty returns the old "type_of_property" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldTypeOfProperty(ctx context.Context) (v listing.TypeOfProperty, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeOfProperty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeOfProperty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeOfProperty: %w", err)
	}
	return oldValue.TypeOfProperty, nil
}

// ResetTypeOfProperty resets all changes to the "type_of_property" field.
func (m *ListingMutation) ResetTypeOfProperty() {
	m.type_of_property = nil
}

// SetStatus sets the "status" field.
func (m *ListingMutation) SetStatus(l listing.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *ListingMutation) Status() (r listing.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldStatus(ctx context.Context) (v listing.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ListingMutation) ResetStatus() {
	m.status = nil
}

// SetLotSize sets the "lot_size" field.
func (m *ListingMutation) SetLotSize(i int) {
	m.lot_size = &i
	m.addlot_size = nil
}

// LotSize returns the value of the "lot_size" field in the mutation.
func (m *ListingMutation) LotSize() (r int, exists bool) {
	v := m.lot_size
	if v == nil {
		return
	}
	return *v, true
}

// OldLotSize returns the old "lot_size" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldLotSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLotSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLotSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLotSize: %w", err)
	}
	return oldValue.LotSize, nil
}

// AddLotSize adds i to the "lot_size" field.
func (m *ListingMutation) AddLotSize(i int) {
	if m.addlot_size != nil {
		*m.addlot_size += i
	} else {
		m.addlot_size = &i
	}
}

// AddedLotSize returns the value that was added to the "lot_size" field in this mutation.
func (m *ListingMutation) AddedLotSize() (r int, exists bool) {
	v := m.addlot_size
	if v == nil {
		return
	}
	return *v, true
}

// ClearLotSize clears the value of the "lot_size" field.
func (m *ListingMutation) ClearLotSize() {
	m.lot_size = nil
	m.addlot_size = nil
	m.clearedFields[listing.FieldLotSize] = struct{}{}
}

// LotSizeCleared returns if the "lot_size" field was cleared in this mutation.
func (m *ListingMutation) LotSizeCleared() bool {
	_, ok := m.clearedFields[listing.FieldLotSize]
	return ok
}

// ResetLotSize resets all changes to the "lot_size" field.
func (m *ListingMutation) ResetLotSize() {
	m.lot_size = nil
	m.addlot_size = nil
	delete(m.clearedFields, listing.FieldLotSize)
}

// SetPool sets the "pool" field.
func (m *ListingMutation) SetPool(b bool) {
	m.pool = &b
}

// Pool returns the value of the "pool" field in the mutation.
func (m *ListingMutation) Pool() (r bool, exists bool) {
	v := m.pool
	if v == nil {
		return
	}
	return *v, true
}

// OldPool returns the old "pool" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldPool(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPool: %w", err)
	}
	return oldValue.Pool, nil
}

// ClearPool clears the value of the "pool" field.
func (m *ListingMutation) ClearPool() {
	m.pool = nil
	m.clearedFields[listing.FieldPool] = struct{}{}
}

// PoolCleared returns if the "pool" field was cleared in this mutation.
func (m *ListingMutation) PoolCleared() bool {
	_, ok := m.clearedFields[listing.FieldPool]
	return ok
}

// ResetPool resets all changes to the "pool" field.
func (m *ListingMutation) ResetPool() {
	m.pool = nil
	delete(m.clearedFields, listing.FieldPool)
}

// SetYearBuilt sets the "year_built" field.
func (m *ListingMutation) SetYearBuilt(i int) {
	m.year_built = &i
	m.addyear_built = nil
}

// YearBuilt returns the value of the "year_built" field in the mutation.
func (m *ListingMutation) YearBuilt() (r int, exists bool) {
	v := m.year_built
	if v == nil {
		return
	}
	return *v, true
}

// OldYearBuilt returns the old "year_built" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldYearBuilt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYearBuilt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYearBuilt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYearBuilt: %w", err)
	}
	return oldValue.YearBuilt, nil
}

// AddYearBuilt adds i to the "year_built" field.
func (m *ListingMutation) AddYearBuilt(i int) {
	if m.addyear_built != nil {
		*m.addyear_built += i
	} else {
		m.addyear_built = &i
	}
}

// AddedYearBuilt returns the value that was added to the "year_built" field in this mutation.
func (m *ListingMutation) AddedYearBuilt() (r int, exists bool) {
	v := m.addyear_built
	if v == nil {
		return
	}
	return *v, true
}

// ResetYearBuilt resets all changes to the "year_built" field.
func (m *ListingMutation) ResetYearBuilt() {
	m.year_built = nil
	m.addyear_built = nil
}

// SetMedia sets the "media" field.
func (m *ListingMutation) SetMedia(s []schema.Media) {
	m.media = &s
	m.appendmedia = nil
}

// Media returns the value of the "media" field in the mutation.
func (m *ListingMutation) Media() (r []schema.Media, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMedia returns the old "media" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldMedia(ctx context.Context) (v []schema.Media, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedia: %w", err)
	}
	return oldValue.Media, nil
}

// AppendMedia adds s to the "media" field.
func (m *ListingMutation) AppendMedia(s []schema.Media) {
	m.appendmedia = append(m.appendmedia, s...)
}

// AppendedMedia returns the list of values that were appended to the "media" field in this mutation.
func (m *ListingMutation) AppendedMedia() ([]schema.Media, bool) {
	if len(m.appendmedia) == 0 {
		return nil, false
	}
	return m.appendmedia, true
}

// ClearMedia clears the value of the "media" field.
func (m *ListingMutation) ClearMedia() {
	m.media = nil
	m.appendmedia = nil
	m.clearedFields[listing.FieldMedia] = struct{}{}
}

// MediaCleared returns if the "media" field was cleared in this mutation.
func (m *ListingMutation) MediaCleared() bool {
	_, ok := m.clearedFields[listing.FieldMedia]
	return ok
}

// ResetMedia resets all changes to the "media" field.
func (m *ListingMutation) ResetMedia() {
	m.media = nil
	m.appendmedia = nil
	delete(m.clearedFields, listing.FieldMedia)
}

// SetRealtorID sets the "realtor_id" field.
func (m *ListingMutation) SetRealtorID(u uuid.UUID) {
	m.realtor = &u
}

// RealtorID returns the value of the "realtor_id" field in the mutation.
func (m *ListingMutation) RealtorID() (r uuid.UUID, exists bool) {
	v := m.realtor
	if v == nil {
		return
	}
	return *v, true
}

// OldRealtorID returns the old "realtor_id" field's value of the Listing entity.
// If the Listing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListingMutation) OldRealtorID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealtorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealtorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealtorID: %w", err)
	}
	return oldValue.RealtorID, nil
}

// ResetRealtorID resets all changes to the "realtor_id" field.
func (m *ListingMutation) ResetRealtorID() {
	m.realtor = nil
}

// ClearRealtor clears the "realtor" edge to the Realtor entity.
func (m *ListingMutation) ClearRealtor() {
	m.clearedrealtor = true
	m.clearedFields[listing.FieldRealtorID] = struct{}{}
}

// RealtorCleared reports if the "realtor" edge to the Realtor entity was cleared.
func (m *ListingMutation) RealtorCleared() bool {
	return m.clearedrealtor
}

// RealtorIDs returns the "realtor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RealtorID instead. It exists only for internal usage by the builders.
func (m *ListingMutation) RealtorIDs() (ids []uuid.UUID) {
	if id := m.realtor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRealtor resets all changes to the "realtor" edge.
func (m *ListingMutation) ResetRealtor() {
	m.realtor = nil
	m.clearedrealtor = false
}

// Where appends a list predicates to the ListingMutation builder.
func (m *ListingMutation) Where(ps ...predicate.Listing) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ListingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ListingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Listing, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ListingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ListingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Listing).
func (m *ListingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ListingMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.create_time != nil {
		fields = append(fields, listing.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, listing.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, listing.FieldTitle)
	}
	if m.address != nil {
		fields = append(fields, listing.FieldAddress)
	}
	if m.city != nil {
		fields = append(fields, listing.FieldCity)
	}
	if m.state != nil {
		fields = append(fields, listing.FieldState)
	}
	if m.zip_code != nil {
		fields = append(fields, listing.FieldZipCode)
	}
	if m.description != nil {
		fields = append(fields, listing.FieldDescription)
	}
	if m.price != nil {
		fields = append(fields, listing.FieldPrice)
	}
	if m.bedroom != nil {
		fields = append(fields, listing.FieldBedroom)
	}
	if m.bathroom != nil {
		fields = append(fields, listing.FieldBathroom)
	}
	if m.garage != nil {
		fields = append(fields, listing.FieldGarage)
	}
	if m.sqft != nil {
		fields = append(fields, listing.FieldSqft)
	}
	if m.type_of_property != nil {
		fields = append(fields, listing.FieldTypeOfProperty)
	}
	if m.status != nil {
		fields = append(fields, listing.FieldStatus)
	}
	if m.lot_size != nil {
		fields = append(fields, listing.FieldLotSize)
	}
	if m.pool != nil {
		fields = append(fields, listing.FieldPool)
	}
	if m.year_built != nil {
		fields = append(fields, listing.FieldYearBuilt)
	}
	if m.media != nil {
		fields = append(fields, listing.FieldMedia)
	}
	if m.realtor != nil {
		fields = append(fields, listing.FieldRealtorID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ListingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case listing.FieldCreateTime:
		return m.CreateTime()
	case listing.FieldUpdateTime:
		return m.UpdateTime()
	case listing.FieldTitle:
		return m.Title()
	case listing.FieldAddress:
		return m.Address()
	case listing.FieldCity:
		return m.City()
	case listing.FieldState:
		return m.State()
	case listing.FieldZipCode:
		return m.ZipCode()
	case listing.FieldDescription:
		return m.Description()
	case listing.FieldPrice:
		return m.Price()
	case listing.FieldBedroom:
		return m.Bedroom()
	case listing.FieldBathroom:
		return m.Bathroom()
	case listing.FieldGarage:
		return m.Garage()
	case listing.FieldSqft:
		return m.Sqft()
	case listing.FieldTypeOfProperty:
		return m.TypeOfProperty()
	case listing.FieldStatus:
		return m.Status()
	case listing.FieldLotSize:
		return m.LotSize()
	case listing.FieldPool:
		return m.Pool()
	case listing.FieldYearBuilt:
		return m.YearBuilt()
	case listing.FieldMedia:
		return m.Media()
	case listing.FieldRealtorID:
		return m.RealtorID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ListingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case listing.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case listing.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case listing.FieldTitle:
		return m.OldTitle(ctx)
	case listing.FieldAddress:
		return m.OldAddress(ctx)
	case listing.FieldCity:
		return m.OldCity(ctx)
	case listing.FieldState:
		return m.OldState(ctx)
	case listing.FieldZipCode:
		return m.OldZipCode(ctx)
	case listing.FieldDescription:
		return m.OldDescription(ctx)
	case listing.FieldPrice:
		return m.OldPrice(ctx)
	case listing.FieldBedroom:
		return m.OldBedroom(ctx)
	case listing.FieldBathroom:
		return m.OldBathroom(ctx)
	case listing.FieldGarage:
		return m.OldGarage(ctx)
	case listing.FieldSqft:
		return m.OldSqft(ctx)
	case listing.FieldTypeOfProperty:
		return m.OldTypeOfProperty(ctx)
	case listing.FieldStatus:
		return m.OldStatus(ctx)
	case listing.FieldLotSize:
		return m.OldLotSize(ctx)
	case listing.FieldPool:
		return m.OldPool(ctx)
	case listing.FieldYearBuilt:
		return m.OldYearBuilt(ctx)
	case listing.FieldMedia:
		return m.OldMedia(ctx)
	case listing.FieldRealtorID:
		return m.OldRealtorID(ctx)
	}
	return nil, fmt.Errorf("unknown Listing field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case listing.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case listing.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case listing.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case listing.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case listing.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case listing.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case listing.FieldZipCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZipCode(v)
		return nil
	case listing.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case listing.FieldPrice:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case listing.FieldBedroom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBedroom(v)
		return nil
	case listing.FieldBathroom:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBathroom(v)
		return nil
	case listing.FieldGarage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGarage(v)
		return nil
	case listing.FieldSqft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSqft(v)
		return nil
	case listing.FieldTypeOfProperty:
		v, ok := value.(listing.TypeOfProperty)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeOfProperty(v)
		return nil
	case listing.FieldStatus:
		v, ok := value.(listing.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case listing.FieldLotSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLotSize(v)
		return nil
	case listing.FieldPool:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPool(v)
		return nil
	case listing.FieldYearBuilt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYearBuilt(v)
		return nil
	case listing.FieldMedia:
		v, ok := value.([]schema.Media)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedia(v)
		return nil
	case listing.FieldRealtorID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealtorID(v)
		return nil
	}
	return fmt.Errorf("unknown Listing field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ListingMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, listing.FieldPrice)
	}
	if m.addbedroom != nil {
		fields = append(fields, listing.FieldBedroom)
	}
	if m.addbathroom != nil {
		fields = append(fields, listing.FieldBathroom)
	}
	if m.addgarage != nil {
		fields = append(fields, listing.FieldGarage)
	}
	if m.addsqft != nil {
		fields = append(fields, listing.FieldSqft)
	}
	if m.addlot_size != nil {
		fields = append(fields, listing.FieldLotSize)
	}
	if m.addyear_built != nil {
		fields = append(fields, listing.FieldYearBuilt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ListingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case listing.FieldPrice:
		return m.AddedPrice()
	case listing.FieldBedroom:
		return m.AddedBedroom()
	case listing.FieldBathroom:
		return m.AddedBathroom()
	case listing.FieldGarage:
		return m.AddedGarage()
	case listing.FieldSqft:
		return m.AddedSqft()
	case listing.FieldLotSize:
		return m.AddedLotSize()
	case listing.FieldYearBuilt:
		return m.AddedYearBuilt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case listing.FieldPrice:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case listing.FieldBedroom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBedroom(v)
		return nil
	case listing.FieldBathroom:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBathroom(v)
		return nil
	case listing.FieldGarage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGarage(v)
		return nil
	case listing.FieldSqft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSqft(v)
		return nil
	case listing.FieldLotSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLotSize(v)
		return nil
	case listing.FieldYearBuilt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYearBuilt(v)
		return nil
	}
	return fmt.Errorf("unknown Listing numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ListingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(listing.FieldDescription) {
		fields = append(fields, listing.FieldDescription)
	}
	if m.FieldCleared(listing.FieldGarage) {
		fields = append(fields, listing.FieldGarage)
	}
	if m.FieldCleared(listing.FieldLotSize) {
		fields = append(fields, listing.FieldLotSize)
	}
	if m.FieldCleared(listing.FieldPool) {
		fields = append(fields, listing.FieldPool)
	}
	if m.FieldCleared(listing.FieldMedia) {
		fields = append(fields, listing.FieldMedia)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ListingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ListingMutation) ClearField(name string) error {
	switch name {
	case listing.FieldDescription:
		m.ClearDescription()
		return nil
	case listing.FieldGarage:
		m.ClearGarage()
		return nil
	case listing.FieldLotSize:
		m.ClearLotSize()
		return nil
	case listing.FieldPool:
		m.ClearPool()
		return nil
	case listing.FieldMedia:
		m.ClearMedia()
		return nil
	}
	return fmt.Errorf("unknown Listing nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ListingMutation) ResetField(name string) error {
	switch name {
	case listing.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case listing.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case listing.FieldTitle:
		m.ResetTitle()
		return nil
	case listing.FieldAddress:
		m.ResetAddress()
		return nil
	case listing.FieldCity:
		m.ResetCity()
		return nil
	case listing.FieldState:
		m.ResetState()
		return nil
	case listing.FieldZipCode:
		m.ResetZipCode()
		return nil
	case listing.FieldDescription:
		m.ResetDescription()
		return nil
	case listing.FieldPrice:
		m.ResetPrice()
		return nil
	case listing.FieldBedroom:
		m.ResetBedroom()
		return nil
	case listing.FieldBathroom:
		m.ResetBathroom()
		return nil
	case listing.FieldGarage:
		m.ResetGarage()
		return nil
	case listing.FieldSqft:
		m.ResetSqft()
		return nil
	case listing.FieldTypeOfProperty:
		m.ResetTypeOfProperty()
		return nil
	case listing.FieldStatus:
		m.ResetStatus()
		return nil
	case listing.FieldLotSize:
		m.ResetLotSize()
		return nil
	case listing.FieldPool:
		m.ResetPool()
		return nil
	case listing.FieldYearBuilt:
		m.ResetYearBuilt()
		return nil
	case listing.FieldMedia:
		m.ResetMedia()
		return nil
	case listing.FieldRealtorID:
		m.ResetRealtorID()
		return nil
	}
	return fmt.Errorf("unknown Listing field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ListingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.realtor != nil {
		edges = append(edges, listing.EdgeRealtor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ListingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case listing.EdgeRealtor:
		if id := m.realtor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ListingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ListingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ListingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrealtor {
		edges = append(edges, listing.EdgeRealtor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ListingMutation) EdgeCleared(name string) bool {
	switch name {
	case listing.EdgeRealtor:
		return m.clearedrealtor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ListingMutation) ClearEdge(name string) error {
	switch name {
	case listing.EdgeRealtor:
		m.ClearRealtor()
		return nil
	}
	return fmt.Errorf("unknown Listing unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ListingMutation) ResetEdge(name string) error {
	switch name {
	case listing.EdgeRealtor:
		m.ResetRealtor()
		return nil
	}
	return fmt.Errorf("unknown Listing edge %s", name)
}

// RealtorMutation represents an operation that mutates the Realtor nodes in the graph.
type RealtorMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	create_time     *time.Time
	update_time     *time.Time
	full_name       *string
	photo           *map[string]interface{}
	description     *string
	phone           *string
	email           *string
	is_mvp          *bool
	hire_date       *time.Time
	clearedFields   map[string]struct{}
	listings        map[uuid.UUID]struct{}
	removedlistings map[uuid.UUID]struct{}
	clearedlistings bool
	done            bool
	oldValue        func(context.Context) (*Realtor, error)
	predicates      []predicate.Realtor
}

var _ ent.Mutation = (*RealtorMutation)(nil)

// realtorOption allows management of the mutation configuration using functional options.
type realtorOption func(*RealtorMutation)

// newRealtorMutation creates new mutation for the Realtor entity.
func newRealtorMutation(c config, op Op, opts ...realtorOption) *RealtorMutation {
	m := &RealtorMutation{
		config:        c,
		op:            op,
		typ:           TypeRealtor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRealtorID sets the ID field of the mutation.
func withRealtorID(id uuid.UUID) realtorOption {
	return func(m *RealtorMutation) {
		var (
			err   error
			once  sync.Once
			value *Realtor
		)
		m.oldValue = func(ctx context.Context) (*Realtor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Realtor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRealtor sets the old Realtor of the mutation.
func withRealtor(node *Realtor) realtorOption {
	return func(m *RealtorMutation) {
		m.oldValue = func(context.Context) (*Realtor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RealtorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RealtorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Realtor entities.
func (m *RealtorMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RealtorMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RealtorMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Realtor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *RealtorMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RealtorMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RealtorMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *RealtorMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *RealtorMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *RealtorMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetFullName sets the "full_name" field.
func (m *RealtorMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *RealtorMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *RealtorMutation) ResetFullName() {
	m.full_name = nil
}

// SetPhoto sets the "photo" field.
func (m *RealtorMutation) SetPhoto(value map[string]interface{}) {
	m.photo = &value
}

// Photo returns the value of the "photo" field in the mutation.
func (m *RealtorMutation) Photo() (r map[string]interface{}, exists bool) {
	v := m.photo
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoto returns the old "photo" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldPhoto(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoto: %w", err)
	}
	return oldValue.Photo, nil
}

// ClearPhoto clears the value of the "photo" field.
func (m *RealtorMutation) ClearPhoto() {
	m.photo = nil
	m.clearedFields[realtor.FieldPhoto] = struct{}{}
}

// PhotoCleared returns if the "photo" field was cleared in this mutation.
func (m *RealtorMutation) PhotoCleared() bool {
	_, ok := m.clearedFields[realtor.FieldPhoto]
	return ok
}

// ResetPhoto resets all changes to the "photo" field.
func (m *RealtorMutation) ResetPhoto() {
	m.photo = nil
	delete(m.clearedFields, realtor.FieldPhoto)
}

// SetDescription sets the "description" field.
func (m *RealtorMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RealtorMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RealtorMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[realtor.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RealtorMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[realtor.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RealtorMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, realtor.FieldDescription)
}

// SetPhone sets the "phone" field.
func (m *RealtorMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *RealtorMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *RealtorMutation) ResetPhone() {
	m.phone = nil
}

// SetEmail sets the "email" field.
func (m *RealtorMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *RealtorMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *RealtorMutation) ResetEmail() {
	m.email = nil
}

// SetIsMvp sets the "is_mvp" field.
func (m *RealtorMutation) SetIsMvp(b bool) {
	m.is_mvp = &b
}

// IsMvp returns the value of the "is_mvp" field in the mutation.
func (m *RealtorMutation) IsMvp() (r bool, exists bool) {
	v := m.is_mvp
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMvp returns the old "is_mvp" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldIsMvp(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMvp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMvp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMvp: %w", err)
	}
	return oldValue.IsMvp, nil
}

// ResetIsMvp resets all changes to the "is_mvp" field.
func (m *RealtorMutation) ResetIsMvp() {
	m.is_mvp = nil
}

// SetHireDate sets the "hire_date" field.
func (m *RealtorMutation) SetHireDate(t time.Time) {
	m.hire_date = &t
}

// HireDate returns the value of the "hire_date" field in the mutation.
func (m *RealtorMutation) HireDate() (r time.Time, exists bool) {
	v := m.hire_date
	if v == nil {
		return
	}
	return *v, true
}

// OldHireDate returns the old "hire_date" field's value of the Realtor entity.
// If the Realtor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RealtorMutation) OldHireDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHireDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHireDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHireDate: %w", err)
	}
	return oldValue.HireDate, nil
}

// ResetHireDate resets all changes to the "hire_date" field.
func (m *RealtorMutation) ResetHireDate() {
	m.hire_date = nil
}

// AddListingIDs adds the "listings" edge to the Listing entity by ids.
func (m *RealtorMutation) AddListingIDs(ids ...uuid.UUID) {
	if m.listings == nil {
		m.listings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.listings[ids[i]] = struct{}{}
	}
}

// ClearListings clears the "listings" edge to the Listing entity.
func (m *RealtorMutation) ClearListings() {
	m.clearedlistings = true
}

// ListingsCleared reports if the "listings" edge to the Listing entity was cleared.
func (m *RealtorMutation) ListingsCleared() bool {
	return m.clearedlistings
}

// RemoveListingIDs removes the "listings" edge to the Listing entity by IDs.
func (m *RealtorMutation) RemoveListingIDs(ids ...uuid.UUID) {
	if m.removedlistings == nil {
		m.removedlistings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.listings, ids[i])
		m.removedlistings[ids[i]] = struct{}{}
	}
}

// RemovedListings returns the removed IDs of the "listings" edge to the Listing entity.
func (m *RealtorMutation) RemovedListingsIDs() (ids []uuid.UUID) {
	for id := range m.removedlistings {
		ids = append(ids, id)
	}
	return
}

// ListingsIDs returns the "listings" edge IDs in the mutation.
func (m *RealtorMutation) ListingsIDs() (ids []uuid.UUID) {
	for id := range m.listings {
		ids = append(ids, id)
	}
	return
}

// ResetListings resets all changes to the "listings" edge.
func (m *RealtorMutation) ResetListings() {
	m.listings = nil
	m.clearedlistings = false
	m.removedlistings = nil
}

// Where appends a list predicates to the RealtorMutation builder.
func (m *RealtorMutation) Where(ps ...predicate.Realtor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RealtorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RealtorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Realtor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RealtorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RealtorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Realtor).
func (m *RealtorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RealtorMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, realtor.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, realtor.FieldUpdateTime)
	}
	if m.full_name != nil {
		fields = append(fields, realtor.FieldFullName)
	}
	if m.photo != nil {
		fields = append(fields, realtor.FieldPhoto)
	}
	if m.description != nil {
		fields = append(fields, realtor.FieldDescription)
	}
	if m.phone != nil {
		fields = append(fields, realtor.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, realtor.FieldEmail)
	}
	if m.is_mvp != nil {
		fields = append(fields, realtor.FieldIsMvp)
	}
	if m.hire_date != nil {
		fields = append(fields, realtor.FieldHireDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RealtorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case realtor.FieldCreateTime:
		return m.CreateTime()
	case realtor.FieldUpdateTime:
		return m.UpdateTime()
	case realtor.FieldFullName:
		return m.FullName()
	case realtor.FieldPhoto:
		return m.Photo()
	case realtor.FieldDescription:
		return m.Description()
	case realtor.FieldPhone:
		return m.Phone()
	case realtor.FieldEmail:
		return m.Email()
	case realtor.FieldIsMvp:
		return m.IsMvp()
	case realtor.FieldHireDate:
		return m.HireDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RealtorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case realtor.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case realtor.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case realtor.FieldFullName:
		return m.OldFullName(ctx)
	case realtor.FieldPhoto:
		return m.OldPhoto(ctx)
	case realtor.FieldDescription:
		return m.OldDescription(ctx)
	case realtor.FieldPhone:
		return m.OldPhone(ctx)
	case realtor.FieldEmail:
		return m.OldEmail(ctx)
	case realtor.FieldIsMvp:
		return m.OldIsMvp(ctx)
	case realtor.FieldHireDate:
		return m.OldHireDate(ctx)
	}
	return nil, fmt.Errorf("unknown Realtor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case realtor.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case realtor.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case realtor.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case realtor.FieldPhoto:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoto(v)
		return nil
	case realtor.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case realtor.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case realtor.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case realtor.FieldIsMvp:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMvp(v)
		return nil
	case realtor.FieldHireDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHireDate(v)
		return nil
	}
	return fmt.Errorf("unknown Realtor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RealtorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RealtorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RealtorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Realtor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RealtorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(realtor.FieldPhoto) {
		fields = append(fields, realtor.FieldPhoto)
	}
	if m.FieldCleared(realtor.FieldDescription) {
		fields = append(fields, realtor.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RealtorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RealtorMutation) ClearField(name string) error {
	switch name {
	case realtor.FieldPhoto:
		m.ClearPhoto()
		return nil
	case realtor.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Realtor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RealtorMutation) ResetField(name string) error {
	switch name {
	case realtor.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case realtor.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case realtor.FieldFullName:
		m.ResetFullName()
		return nil
	case realtor.FieldPhoto:
		m.ResetPhoto()
		return nil
	case realtor.FieldDescription:
		m.ResetDescription()
		return nil
	case realtor.FieldPhone:
		m.ResetPhone()
		return nil
	case realtor.FieldEmail:
		m.ResetEmail()
		return nil
	case realtor.FieldIsMvp:
		m.ResetIsMvp()
		return nil
	case realtor.FieldHireDate:
		m.ResetHireDate()
		return nil
	}
	return fmt.Errorf("unknown Realtor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RealtorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.listings != nil {
		edges = append(edges, realtor.EdgeListings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RealtorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case realtor.EdgeListings:
		ids := make([]ent.Value, 0, len(m.listings))
		for id := range m.listings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RealtorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlistings != nil {
		edges = append(edges, realtor.EdgeListings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RealtorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case realtor.EdgeListings:
		ids := make([]ent.Value, 0, len(m.removedlistings))
		for id := range m.removedlistings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RealtorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlistings {
		edges = append(edges, realtor.EdgeListings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RealtorMutation) EdgeCleared(name string) bool {
	switch name {
	case realtor.EdgeListings:
		return m.clearedlistings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RealtorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Realtor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RealtorMutation) ResetEdge(name string) error {
	switch name {
	case realtor.EdgeListings:
		m.ResetListings()
		return nil
	}
	return fmt.Errorf("unknown Realtor edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	avatar        *string
	email         *string
	username      *string
	full_name     *string
	start_date    *time.Time
	is_staff      *bool
	is_active     *bool
	password      *string
	provider      *string
	provider_id   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
}

// SetStartDate sets the "start_date" field.
func (m *UserMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *UserMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *UserMutation) ResetStartDate() {
	m.start_date = nil
}

// SetIsStaff sets the "is_staff" field.
func (m *UserMutation) SetIsStaff(b bool) {
	m.is_staff = &b
}

// IsStaff returns the value of the "is_staff" field in the mutation.
func (m *UserMutation) IsStaff() (r bool, exists bool) {
	v := m.is_staff
	if v == nil {
		return
	}
	return *v, true
}

// OldIsStaff returns the old "is_staff" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsStaff(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsStaff is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsStaff requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsStaff: %w", err)
	}
	return oldValue.IsStaff, nil
}

// ResetIsStaff resets all changes to the "is_staff" field.
func (m *UserMutation) ResetIsStaff() {
	m.is_staff = nil
}

// SetIsActive sets the "is_active" field.
func (m *UserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetProvider sets the "provider" field.
func (m *UserMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *UserMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *UserMutation) ResetProvider() {
	m.provider = nil
}

// SetProviderID sets the "provider_id" field.
func (m *UserMutation) SetProviderID(s string) {
	m.provider_id = &s
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *UserMutation) ProviderID() (r string, exists bool) {
	v := m.provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProviderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ClearProviderID clears the value of the "provider_id" field.
func (m *UserMutation) ClearProviderID() {
	m.provider_id = nil
	m.clearedFields[user.FieldProviderID] = struct{}{}
}

// ProviderIDCleared returns if the "provider_id" field was cleared in this mutation.
func (m *UserMutation) ProviderIDCleared() bool {
	_, ok := m.clearedFields[user.FieldProviderID]
	return ok
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *UserMutation) ResetProviderID() {
	m.provider_id = nil
	delete(m.clearedFields, user.FieldProviderID)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.start_date != nil {
		fields = append(fields, user.FieldStartDate)
	}
	if m.is_staff != nil {
		fields = append(fields, user.FieldIsStaff)
	}
	if m.is_active != nil {
		fields = append(fields, user.FieldIsActive)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.provider != nil {
		fields = append(fields, user.FieldProvider)
	}
	if m.provider_id != nil {
		fields = append(fields, user.FieldProviderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldEmail:
		return m.Email()
	case user.FieldUsername:
		return m.Username()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldStartDate:
		return m.StartDate()
	case user.FieldIsStaff:
		return m.IsStaff()
	case user.FieldIsActive:
		return m.IsActive()
	case user.FieldPassword:
		return m.Password()
	case user.FieldProvider:
		return m.Provider()
	case user.FieldProviderID:
		return m.ProviderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldStartDate:
		return m.OldStartDate(ctx)
	case user.FieldIsStaff:
		return m.OldIsStaff(ctx)
	case user.FieldIsActive:
		return m.OldIsActive(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldProvider:
		return m.OldProvider(ctx)
	case user.FieldProviderID:
		return m.OldProviderID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case user.FieldIsStaff:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsStaff(v)
		return nil
	case user.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case user.FieldProviderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	if m.FieldCleared(user.FieldProviderID) {
		fields = append(fields, user.FieldProviderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	case user.FieldProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldStartDate:
		m.ResetStartDate()
		return nil
	case user.FieldIsStaff:
		m.ResetIsStaff()
		return nil
	case user.FieldIsActive:
		m.ResetIsActive()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldProvider:
		m.ResetProvider()
		return nil
	case user.FieldProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
