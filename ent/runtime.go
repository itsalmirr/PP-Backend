// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"ppgroup.ppgroup.com/ent/listing"
	"ppgroup.ppgroup.com/ent/realtor"
	"ppgroup.ppgroup.com/ent/schema"
	"ppgroup.ppgroup.com/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	listingMixin := schema.Listing{}.Mixin()
	listingMixinFields0 := listingMixin[0].Fields()
	_ = listingMixinFields0
	listingFields := schema.Listing{}.Fields()
	_ = listingFields
	// listingDescCreateTime is the schema descriptor for create_time field.
	listingDescCreateTime := listingMixinFields0[0].Descriptor()
	// listing.DefaultCreateTime holds the default value on creation for the create_time field.
	listing.DefaultCreateTime = listingDescCreateTime.Default.(func() time.Time)
	// listingDescUpdateTime is the schema descriptor for update_time field.
	listingDescUpdateTime := listingMixinFields0[1].Descriptor()
	// listing.DefaultUpdateTime holds the default value on creation for the update_time field.
	listing.DefaultUpdateTime = listingDescUpdateTime.Default.(func() time.Time)
	// listing.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	listing.UpdateDefaultUpdateTime = listingDescUpdateTime.UpdateDefault.(func() time.Time)
	// listingDescTitle is the schema descriptor for title field.
	listingDescTitle := listingFields[1].Descriptor()
	// listing.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	listing.TitleValidator = func() func(string) error {
		validators := listingDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescAddress is the schema descriptor for address field.
	listingDescAddress := listingFields[2].Descriptor()
	// listing.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	listing.AddressValidator = func() func(string) error {
		validators := listingDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescCity is the schema descriptor for city field.
	listingDescCity := listingFields[3].Descriptor()
	// listing.CityValidator is a validator for the "city" field. It is called by the builders before save.
	listing.CityValidator = func() func(string) error {
		validators := listingDescCity.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(city string) error {
			for _, fn := range fns {
				if err := fn(city); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescState is the schema descriptor for state field.
	listingDescState := listingFields[4].Descriptor()
	// listing.StateValidator is a validator for the "state" field. It is called by the builders before save.
	listing.StateValidator = func() func(string) error {
		validators := listingDescState.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(state string) error {
			for _, fn := range fns {
				if err := fn(state); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescZipCode is the schema descriptor for zip_code field.
	listingDescZipCode := listingFields[5].Descriptor()
	// listing.ZipCodeValidator is a validator for the "zip_code" field. It is called by the builders before save.
	listing.ZipCodeValidator = func() func(string) error {
		validators := listingDescZipCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(zip_code string) error {
			for _, fn := range fns {
				if err := fn(zip_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescBedroom is the schema descriptor for bedroom field.
	listingDescBedroom := listingFields[8].Descriptor()
	// listing.BedroomValidator is a validator for the "bedroom" field. It is called by the builders before save.
	listing.BedroomValidator = listingDescBedroom.Validators[0].(func(int) error)
	// listingDescBathroom is the schema descriptor for bathroom field.
	listingDescBathroom := listingFields[9].Descriptor()
	// listing.BathroomValidator is a validator for the "bathroom" field. It is called by the builders before save.
	listing.BathroomValidator = listingDescBathroom.Validators[0].(func(float64) error)
	// listingDescGarage is the schema descriptor for garage field.
	listingDescGarage := listingFields[10].Descriptor()
	// listing.GarageValidator is a validator for the "garage" field. It is called by the builders before save.
	listing.GarageValidator = listingDescGarage.Validators[0].(func(int) error)
	// listingDescSqft is the schema descriptor for sqft field.
	listingDescSqft := listingFields[11].Descriptor()
	// listing.SqftValidator is a validator for the "sqft" field. It is called by the builders before save.
	listing.SqftValidator = listingDescSqft.Validators[0].(func(int) error)
	// listingDescLotSize is the schema descriptor for lot_size field.
	listingDescLotSize := listingFields[14].Descriptor()
	// listing.LotSizeValidator is a validator for the "lot_size" field. It is called by the builders before save.
	listing.LotSizeValidator = listingDescLotSize.Validators[0].(func(int) error)
	// listingDescYearBuilt is the schema descriptor for year_built field.
	listingDescYearBuilt := listingFields[16].Descriptor()
	// listing.YearBuiltValidator is a validator for the "year_built" field. It is called by the builders before save.
	listing.YearBuiltValidator = func() func(int) error {
		validators := listingDescYearBuilt.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(year_built int) error {
			for _, fn := range fns {
				if err := fn(year_built); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// listingDescID is the schema descriptor for id field.
	listingDescID := listingFields[0].Descriptor()
	// listing.DefaultID holds the default value on creation for the id field.
	listing.DefaultID = listingDescID.Default.(func() uuid.UUID)
	realtorMixin := schema.Realtor{}.Mixin()
	realtorMixinFields0 := realtorMixin[0].Fields()
	_ = realtorMixinFields0
	realtorFields := schema.Realtor{}.Fields()
	_ = realtorFields
	// realtorDescCreateTime is the schema descriptor for create_time field.
	realtorDescCreateTime := realtorMixinFields0[0].Descriptor()
	// realtor.DefaultCreateTime holds the default value on creation for the create_time field.
	realtor.DefaultCreateTime = realtorDescCreateTime.Default.(func() time.Time)
	// realtorDescUpdateTime is the schema descriptor for update_time field.
	realtorDescUpdateTime := realtorMixinFields0[1].Descriptor()
	// realtor.DefaultUpdateTime holds the default value on creation for the update_time field.
	realtor.DefaultUpdateTime = realtorDescUpdateTime.Default.(func() time.Time)
	// realtor.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	realtor.UpdateDefaultUpdateTime = realtorDescUpdateTime.UpdateDefault.(func() time.Time)
	// realtorDescFullName is the schema descriptor for full_name field.
	realtorDescFullName := realtorFields[1].Descriptor()
	// realtor.FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	realtor.FullNameValidator = func() func(string) error {
		validators := realtorDescFullName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(full_name string) error {
			for _, fn := range fns {
				if err := fn(full_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// realtorDescDescription is the schema descriptor for description field.
	realtorDescDescription := realtorFields[3].Descriptor()
	// realtor.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	realtor.DescriptionValidator = realtorDescDescription.Validators[0].(func(string) error)
	// realtorDescPhone is the schema descriptor for phone field.
	realtorDescPhone := realtorFields[4].Descriptor()
	// realtor.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	realtor.PhoneValidator = func() func(string) error {
		validators := realtorDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// realtorDescEmail is the schema descriptor for email field.
	realtorDescEmail := realtorFields[5].Descriptor()
	// realtor.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	realtor.EmailValidator = func() func(string) error {
		validators := realtorDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// realtorDescIsMvp is the schema descriptor for is_mvp field.
	realtorDescIsMvp := realtorFields[6].Descriptor()
	// realtor.DefaultIsMvp holds the default value on creation for the is_mvp field.
	realtor.DefaultIsMvp = realtorDescIsMvp.Default.(bool)
	// realtorDescHireDate is the schema descriptor for hire_date field.
	realtorDescHireDate := realtorFields[7].Descriptor()
	// realtor.DefaultHireDate holds the default value on creation for the hire_date field.
	realtor.DefaultHireDate = realtorDescHireDate.Default.(func() time.Time)
	// realtorDescID is the schema descriptor for id field.
	realtorDescID := realtorFields[0].Descriptor()
	// realtor.DefaultID holds the default value on creation for the id field.
	realtor.DefaultID = realtorDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescAvatar is the schema descriptor for avatar field.
	userDescAvatar := userFields[1].Descriptor()
	// user.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	user.AvatarValidator = userDescAvatar.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[3].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFullName is the schema descriptor for full_name field.
	userDescFullName := userFields[4].Descriptor()
	// user.FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	user.FullNameValidator = func() func(string) error {
		validators := userDescFullName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(full_name string) error {
			for _, fn := range fns {
				if err := fn(full_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescStartDate is the schema descriptor for start_date field.
	userDescStartDate := userFields[5].Descriptor()
	// user.DefaultStartDate holds the default value on creation for the start_date field.
	user.DefaultStartDate = userDescStartDate.Default.(func() time.Time)
	// userDescIsStaff is the schema descriptor for is_staff field.
	userDescIsStaff := userFields[6].Descriptor()
	// user.DefaultIsStaff holds the default value on creation for the is_staff field.
	user.DefaultIsStaff = userDescIsStaff.Default.(bool)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[7].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[8].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescProvider is the schema descriptor for provider field.
	userDescProvider := userFields[9].Descriptor()
	// user.DefaultProvider holds the default value on creation for the provider field.
	user.DefaultProvider = userDescProvider.Default.(string)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
