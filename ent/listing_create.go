// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"ppgroup.ppgroup.com/ent/listing"
	"ppgroup.ppgroup.com/ent/realtor"
	"ppgroup.ppgroup.com/ent/schema"
)

// ListingCreate is the builder for creating a Listing entity.
type ListingCreate struct {
	config
	mutation *ListingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (lc *ListingCreate) SetCreateTime(t time.Time) *ListingCreate {
	lc.mutation.SetCreateTime(t)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *ListingCreate) SetNillableCreateTime(t *time.Time) *ListingCreate {
	if t != nil {
		lc.SetCreateTime(*t)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *ListingCreate) SetUpdateTime(t time.Time) *ListingCreate {
	lc.mutation.SetUpdateTime(t)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *ListingCreate) SetNillableUpdateTime(t *time.Time) *ListingCreate {
	if t != nil {
		lc.SetUpdateTime(*t)
	}
	return lc
}

// SetTitle sets the "title" field.
func (lc *ListingCreate) SetTitle(s string) *ListingCreate {
	lc.mutation.SetTitle(s)
	return lc
}

// SetAddress sets the "address" field.
func (lc *ListingCreate) SetAddress(s string) *ListingCreate {
	lc.mutation.SetAddress(s)
	return lc
}

// SetCity sets the "city" field.
func (lc *ListingCreate) SetCity(s string) *ListingCreate {
	lc.mutation.SetCity(s)
	return lc
}

// SetState sets the "state" field.
func (lc *ListingCreate) SetState(s string) *ListingCreate {
	lc.mutation.SetState(s)
	return lc
}

// SetZipCode sets the "zip_code" field.
func (lc *ListingCreate) SetZipCode(s string) *ListingCreate {
	lc.mutation.SetZipCode(s)
	return lc
}

// SetDescription sets the "description" field.
func (lc *ListingCreate) SetDescription(s string) *ListingCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *ListingCreate) SetNillableDescription(s *string) *ListingCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetPrice sets the "price" field.
func (lc *ListingCreate) SetPrice(d decimal.Decimal) *ListingCreate {
	lc.mutation.SetPrice(d)
	return lc
}

// SetBedroom sets the "bedroom" field.
func (lc *ListingCreate) SetBedroom(i int) *ListingCreate {
	lc.mutation.SetBedroom(i)
	return lc
}

// SetBathroom sets the "bathroom" field.
func (lc *ListingCreate) SetBathroom(f float64) *ListingCreate {
	lc.mutation.SetBathroom(f)
	return lc
}

// SetGarage sets the "garage" field.
func (lc *ListingCreate) SetGarage(i int) *ListingCreate {
	lc.mutation.SetGarage(i)
	return lc
}

// SetNillableGarage sets the "garage" field if the given value is not nil.
func (lc *ListingCreate) SetNillableGarage(i *int) *ListingCreate {
	if i != nil {
		lc.SetGarage(*i)
	}
	return lc
}

// SetSqft sets the "sqft" field.
func (lc *ListingCreate) SetSqft(i int) *ListingCreate {
	lc.mutation.SetSqft(i)
	return lc
}

// SetTypeOfProperty sets the "type_of_property" field.
func (lc *ListingCreate) SetTypeOfProperty(lop listing.TypeOfProperty) *ListingCreate {
	lc.mutation.SetTypeOfProperty(lop)
	return lc
}

// SetNillableTypeOfProperty sets the "type_of_property" field if the given value is not nil.
func (lc *ListingCreate) SetNillableTypeOfProperty(lop *listing.TypeOfProperty) *ListingCreate {
	if lop != nil {
		lc.SetTypeOfProperty(*lop)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *ListingCreate) SetStatus(l listing.Status) *ListingCreate {
	lc.mutation.SetStatus(l)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *ListingCreate) SetNillableStatus(l *listing.Status) *ListingCreate {
	if l != nil {
		lc.SetStatus(*l)
	}
	return lc
}

// SetLotSize sets the "lot_size" field.
func (lc *ListingCreate) SetLotSize(i int) *ListingCreate {
	lc.mutation.SetLotSize(i)
	return lc
}

// SetNillableLotSize sets the "lot_size" field if the given value is not nil.
func (lc *ListingCreate) SetNillableLotSize(i *int) *ListingCreate {
	if i != nil {
		lc.SetLotSize(*i)
	}
	return lc
}

// SetPool sets the "pool" field.
func (lc *ListingCreate) SetPool(b bool) *ListingCreate {
	lc.mutation.SetPool(b)
	return lc
}

// SetNillablePool sets the "pool" field if the given value is not nil.
func (lc *ListingCreate) SetNillablePool(b *bool) *ListingCreate {
	if b != nil {
		lc.SetPool(*b)
	}
	return lc
}

// SetYearBuilt sets the "year_built" field.
func (lc *ListingCreate) SetYearBuilt(i int) *ListingCreate {
	lc.mutation.SetYearBuilt(i)
	return lc
}

// SetMedia sets the "media" field.
func (lc *ListingCreate) SetMedia(s []schema.Media) *ListingCreate {
	lc.mutation.SetMedia(s)
	return lc
}

// SetRealtorID sets the "realtor_id" field.
func (lc *ListingCreate) SetRealtorID(u uuid.UUID) *ListingCreate {
	lc.mutation.SetRealtorID(u)
	return lc
}

// SetID sets the "id" field.
func (lc *ListingCreate) SetID(u uuid.UUID) *ListingCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *ListingCreate) SetNillableID(u *uuid.UUID) *ListingCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetRealtor sets the "realtor" edge to the Realtor entity.
func (lc *ListingCreate) SetRealtor(r *Realtor) *ListingCreate {
	return lc.SetRealtorID(r.ID)
}

// Mutation returns the ListingMutation object of the builder.
func (lc *ListingCreate) Mutation() *ListingMutation {
	return lc.mutation
}

// Save creates the Listing in the database.
func (lc *ListingCreate) Save(ctx context.Context) (*Listing, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *ListingCreate) SaveX(ctx context.Context) *Listing {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *ListingCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *ListingCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *ListingCreate) defaults() {
	if _, ok := lc.mutation.CreateTime(); !ok {
		v := listing.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		v := listing.DefaultUpdateTime()
		lc.mutation.SetUpdateTime(v)
	}
	if _, ok := lc.mutation.TypeOfProperty(); !ok {
		v := listing.DefaultTypeOfProperty
		lc.mutation.SetTypeOfProperty(v)
	}
	if _, ok := lc.mutation.Status(); !ok {
		v := listing.DefaultStatus
		lc.mutation.SetStatus(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := listing.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *ListingCreate) check() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Listing.create_time"`)}
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Listing.update_time"`)}
	}
	if _, ok := lc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Listing.title"`)}
	}
	if v, ok := lc.mutation.Title(); ok {
		if err := listing.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Listing.title": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Listing.address"`)}
	}
	if v, ok := lc.mutation.Address(); ok {
		if err := listing.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Listing.address": %w`, err)}
		}
	}
	if _, ok := lc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Listing.city"`)}
	}
	if v, ok := lc.mutation.City(); ok {
		if err := listing.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Listing.city": %w`, err)}
		}
	}
	if _, ok := lc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Listing.state"`)}
	}
	if v, ok := lc.mutation.State(); ok {
		if err := listing.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Listing.state": %w`, err)}
		}
	}
	if _, ok := lc.mutation.ZipCode(); !ok {
		return &ValidationError{Name: "zip_code", err: errors.New(`ent: missing required field "Listing.zip_code"`)}
	}
	if v, ok := lc.mutation.ZipCode(); ok {
		if err := listing.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Listing.zip_code": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Listing.price"`)}
	}
	if _, ok := lc.mutation.Bedroom(); !ok {
		return &ValidationError{Name: "bedroom", err: errors.New(`ent: missing required field "Listing.bedroom"`)}
	}
	if v, ok := lc.mutation.Bedroom(); ok {
		if err := listing.BedroomValidator(v); err != nil {
			return &ValidationError{Name: "bedroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bedroom": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Bathroom(); !ok {
		return &ValidationError{Name: "bathroom", err: errors.New(`ent: missing required field "Listing.bathroom"`)}
	}
	if v, ok := lc.mutation.Bathroom(); ok {
		if err := listing.BathroomValidator(v); err != nil {
			return &ValidationError{Name: "bathroom", err: fmt.Errorf(`ent: validator failed for field "Listing.bathroom": %w`, err)}
		}
	}
	if v, ok := lc.mutation.Garage(); ok {
		if err := listing.GarageValidator(v); err != nil {
			return &ValidationError{Name: "garage", err: fmt.Errorf(`ent: validator failed for field "Listing.garage": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Sqft(); !ok {
		return &ValidationError{Name: "sqft", err: errors.New(`ent: missing required field "Listing.sqft"`)}
	}
	if v, ok := lc.mutation.Sqft(); ok {
		if err := listing.SqftValidator(v); err != nil {
			return &ValidationError{Name: "sqft", err: fmt.Errorf(`ent: validator failed for field "Listing.sqft": %w`, err)}
		}
	}
	if _, ok := lc.mutation.TypeOfProperty(); !ok {
		return &ValidationError{Name: "type_of_property", err: errors.New(`ent: missing required field "Listing.type_of_property"`)}
	}
	if v, ok := lc.mutation.TypeOfProperty(); ok {
		if err := listing.TypeOfPropertyValidator(v); err != nil {
			return &ValidationError{Name: "type_of_property", err: fmt.Errorf(`ent: validator failed for field "Listing.type_of_property": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Listing.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := listing.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Listing.status": %w`, err)}
		}
	}
	if v, ok := lc.mutation.LotSize(); ok {
		if err := listing.LotSizeValidator(v); err != nil {
			return &ValidationError{Name: "lot_size", err: fmt.Errorf(`ent: validator failed for field "Listing.lot_size": %w`, err)}
		}
	}
	if _, ok := lc.mutation.YearBuilt(); !ok {
		return &ValidationError{Name: "year_built", err: errors.New(`ent: missing required field "Listing.year_built"`)}
	}
	if v, ok := lc.mutation.YearBuilt(); ok {
		if err := listing.YearBuiltValidator(v); err != nil {
			return &ValidationError{Name: "year_built", err: fmt.Errorf(`ent: validator failed for field "Listing.year_built": %w`, err)}
		}
	}
	if _, ok := lc.mutation.RealtorID(); !ok {
		return &ValidationError{Name: "realtor_id", err: errors.New(`ent: missing required field "Listing.realtor_id"`)}
	}
	if len(lc.mutation.RealtorIDs()) == 0 {
		return &ValidationError{Name: "realtor", err: errors.New(`ent: missing required edge "Listing.realtor"`)}
	}
	return nil
}

func (lc *ListingCreate) sqlSave(ctx context.Context) (*Listing, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *ListingCreate) createSpec() (*Listing, *sqlgraph.CreateSpec) {
	var (
		_node = &Listing{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(listing.Table, sqlgraph.NewFieldSpec(listing.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(listing.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.SetField(listing.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := lc.mutation.Title(); ok {
		_spec.SetField(listing.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := lc.mutation.Address(); ok {
		_spec.SetField(listing.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := lc.mutation.City(); ok {
		_spec.SetField(listing.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := lc.mutation.State(); ok {
		_spec.SetField(listing.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := lc.mutation.ZipCode(); ok {
		_spec.SetField(listing.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(listing.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.Price(); ok {
		_spec.SetField(listing.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := lc.mutation.Bedroom(); ok {
		_spec.SetField(listing.FieldBedroom, field.TypeInt, value)
		_node.Bedroom = value
	}
	if value, ok := lc.mutation.Bathroom(); ok {
		_spec.SetField(listing.FieldBathroom, field.TypeFloat64, value)
		_node.Bathroom = value
	}
	if value, ok := lc.mutation.Garage(); ok {
		_spec.SetField(listing.FieldGarage, field.TypeInt, value)
		_node.Garage = value
	}
	if value, ok := lc.mutation.Sqft(); ok {
		_spec.SetField(listing.FieldSqft, field.TypeInt, value)
		_node.Sqft = value
	}
	if value, ok := lc.mutation.TypeOfProperty(); ok {
		_spec.SetField(listing.FieldTypeOfProperty, field.TypeEnum, value)
		_node.TypeOfProperty = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(listing.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.LotSize(); ok {
		_spec.SetField(listing.FieldLotSize, field.TypeInt, value)
		_node.LotSize = value
	}
	if value, ok := lc.mutation.Pool(); ok {
		_spec.SetField(listing.FieldPool, field.TypeBool, value)
		_node.Pool = value
	}
	if value, ok := lc.mutation.YearBuilt(); ok {
		_spec.SetField(listing.FieldYearBuilt, field.TypeInt, value)
		_node.YearBuilt = value
	}
	if value, ok := lc.mutation.Media(); ok {
		_spec.SetField(listing.FieldMedia, field.TypeJSON, value)
		_node.Media = value
	}
	if nodes := lc.mutation.RealtorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.RealtorTable,
			Columns: []string{listing.RealtorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealtorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ListingCreateBulk is the builder for creating many Listing entities in bulk.
type ListingCreateBulk struct {
	config
	err      error
	builders []*ListingCreate
}

// Save creates the Listing entities in the database.
func (lcb *ListingCreateBulk) Save(ctx context.Context) ([]*Listing, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Listing, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ListingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *ListingCreateBulk) SaveX(ctx context.Context) []*Listing {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *ListingCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *ListingCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
