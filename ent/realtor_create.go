// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"ppgroup.m0chi.com/ent/listing"
	"ppgroup.m0chi.com/ent/realtor"
)

// RealtorCreate is the builder for creating a Realtor entity.
type RealtorCreate struct {
	config
	mutation *RealtorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rc *RealtorCreate) SetCreateTime(t time.Time) *RealtorCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableCreateTime(t *time.Time) *RealtorCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RealtorCreate) SetUpdateTime(t time.Time) *RealtorCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableUpdateTime(t *time.Time) *RealtorCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetFullName sets the "full_name" field.
func (rc *RealtorCreate) SetFullName(s string) *RealtorCreate {
	rc.mutation.SetFullName(s)
	return rc
}

// SetPhoto sets the "photo" field.
func (rc *RealtorCreate) SetPhoto(m map[string]interface{}) *RealtorCreate {
	rc.mutation.SetPhoto(m)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RealtorCreate) SetDescription(s string) *RealtorCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableDescription(s *string) *RealtorCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetPhone sets the "phone" field.
func (rc *RealtorCreate) SetPhone(s string) *RealtorCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetEmail sets the "email" field.
func (rc *RealtorCreate) SetEmail(s string) *RealtorCreate {
	rc.mutation.SetEmail(s)
	return rc
}

// SetIsMvp sets the "is_mvp" field.
func (rc *RealtorCreate) SetIsMvp(b bool) *RealtorCreate {
	rc.mutation.SetIsMvp(b)
	return rc
}

// SetNillableIsMvp sets the "is_mvp" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableIsMvp(b *bool) *RealtorCreate {
	if b != nil {
		rc.SetIsMvp(*b)
	}
	return rc
}

// SetHireDate sets the "hire_date" field.
func (rc *RealtorCreate) SetHireDate(t time.Time) *RealtorCreate {
	rc.mutation.SetHireDate(t)
	return rc
}

// SetNillableHireDate sets the "hire_date" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableHireDate(t *time.Time) *RealtorCreate {
	if t != nil {
		rc.SetHireDate(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RealtorCreate) SetID(u uuid.UUID) *RealtorCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RealtorCreate) SetNillableID(u *uuid.UUID) *RealtorCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddListingIDs adds the "listings" edge to the Listing entity by IDs.
func (rc *RealtorCreate) AddListingIDs(ids ...uuid.UUID) *RealtorCreate {
	rc.mutation.AddListingIDs(ids...)
	return rc
}

// AddListings adds the "listings" edges to the Listing entity.
func (rc *RealtorCreate) AddListings(l ...*Listing) *RealtorCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rc.AddListingIDs(ids...)
}

// Mutation returns the RealtorMutation object of the builder.
func (rc *RealtorCreate) Mutation() *RealtorMutation {
	return rc.mutation
}

// Save creates the Realtor in the database.
func (rc *RealtorCreate) Save(ctx context.Context) (*Realtor, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RealtorCreate) SaveX(ctx context.Context) *Realtor {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RealtorCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RealtorCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RealtorCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := realtor.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := realtor.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	if _, ok := rc.mutation.IsMvp(); !ok {
		v := realtor.DefaultIsMvp
		rc.mutation.SetIsMvp(v)
	}
	if _, ok := rc.mutation.HireDate(); !ok {
		v := realtor.DefaultHireDate()
		rc.mutation.SetHireDate(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := realtor.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RealtorCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Realtor.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Realtor.update_time"`)}
	}
	if _, ok := rc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Realtor.full_name"`)}
	}
	if v, ok := rc.mutation.FullName(); ok {
		if err := realtor.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Realtor.full_name": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Description(); ok {
		if err := realtor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Realtor.description": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Realtor.phone"`)}
	}
	if v, ok := rc.mutation.Phone(); ok {
		if err := realtor.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Realtor.phone": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Realtor.email"`)}
	}
	if v, ok := rc.mutation.Email(); ok {
		if err := realtor.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Realtor.email": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsMvp(); !ok {
		return &ValidationError{Name: "is_mvp", err: errors.New(`ent: missing required field "Realtor.is_mvp"`)}
	}
	if _, ok := rc.mutation.HireDate(); !ok {
		return &ValidationError{Name: "hire_date", err: errors.New(`ent: missing required field "Realtor.hire_date"`)}
	}
	return nil
}

func (rc *RealtorCreate) sqlSave(ctx context.Context) (*Realtor, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RealtorCreate) createSpec() (*Realtor, *sqlgraph.CreateSpec) {
	var (
		_node = &Realtor{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(realtor.Table, sqlgraph.NewFieldSpec(realtor.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(realtor.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(realtor.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.FullName(); ok {
		_spec.SetField(realtor.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := rc.mutation.Photo(); ok {
		_spec.SetField(realtor.FieldPhoto, field.TypeJSON, value)
		_node.Photo = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(realtor.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.SetField(realtor.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := rc.mutation.Email(); ok {
		_spec.SetField(realtor.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := rc.mutation.IsMvp(); ok {
		_spec.SetField(realtor.FieldIsMvp, field.TypeBool, value)
		_node.IsMvp = value
	}
	if value, ok := rc.mutation.HireDate(); ok {
		_spec.SetField(realtor.FieldHireDate, field.TypeTime, value)
		_node.HireDate = value
	}
	if nodes := rc.mutation.ListingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   realtor.ListingsTable,
			Columns: []string{realtor.ListingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RealtorCreateBulk is the builder for creating many Realtor entities in bulk.
type RealtorCreateBulk struct {
	config
	err      error
	builders []*RealtorCreate
}

// Save creates the Realtor entities in the database.
func (rcb *RealtorCreateBulk) Save(ctx context.Context) ([]*Realtor, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Realtor, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RealtorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RealtorCreateBulk) SaveX(ctx context.Context) []*Realtor {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RealtorCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RealtorCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
